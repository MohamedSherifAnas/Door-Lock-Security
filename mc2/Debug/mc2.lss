
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002880  00002914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006e  0080006e  00002922  2**0
                  ALLOC
  3 .stab         00002b74  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e3  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000702b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000acf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 */
void callBackFunction_buzzer ();


int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c1 56       	subi	r28, 0x61	; 97
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	/* Enable I-Bit for Interrupts*/
	SREG |=(1<<7);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
	 * 4.Asynchronous
	 * 5.Disable Parity
	 * 6.one stop bit
	 */
	usart_ConfigType usart_Config;
	usart_Config.speed=DOUBLE_SPEED;
     b6e:	fe 01       	movw	r30, r28
     b70:	e9 5b       	subi	r30, 0xB9	; 185
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 83       	st	Z, r24
	usart_Config.receiveInterrupt=ENABLE_RX;
     b78:	fe 01       	movw	r30, r28
     b7a:	e9 5b       	subi	r30, 0xB9	; 185
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	81 83       	std	Z+1, r24	; 0x01
	usart_Config.CharacterSize=EIGHT_BIT;
     b82:	fe 01       	movw	r30, r28
     b84:	e9 5b       	subi	r30, 0xB9	; 185
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	83 83       	std	Z+3, r24	; 0x03
	usart_Config.modeSelect=ASYNCHRONOUS;
     b8c:	fe 01       	movw	r30, r28
     b8e:	e9 5b       	subi	r30, 0xB9	; 185
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	14 82       	std	Z+4, r1	; 0x04
	usart_Config.ParityMode=DISABLE_PARITY;
     b94:	fe 01       	movw	r30, r28
     b96:	e9 5b       	subi	r30, 0xB9	; 185
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	15 82       	std	Z+5, r1	; 0x05
	usart_Config.stopBitSelect=ONE_BIT;
     b9c:	fe 01       	movw	r30, r28
     b9e:	e9 5b       	subi	r30, 0xB9	; 185
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	16 82       	std	Z+6, r1	; 0x06

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&usart_Config, 9600);
     ba4:	ce 01       	movw	r24, r28
     ba6:	89 5b       	subi	r24, 0xB9	; 185
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	55 e2       	ldi	r21, 0x25	; 37
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <UART_init>
	 * 2.Timer0 InitialValue=0
	 * 3.Timer0 prescaler=1024
	 * 4.Over Flow Interrupt Enabled
	 */
	Timer0_ConfigType Timer0_Config;
	Timer0_Config.Timer0_mode=NORMAL_MODE;
     bb6:	fe 01       	movw	r30, r28
     bb8:	e1 5b       	subi	r30, 0xB1	; 177
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	10 82       	st	Z, r1
	Timer0_Config.Timer0_InitialValue=0;
     bbe:	fe 01       	movw	r30, r28
     bc0:	e1 5b       	subi	r30, 0xB1	; 177
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	11 82       	std	Z+1, r1	; 0x01
	Timer0_Config.Timer0_CombareValue=0;
     bc6:	fe 01       	movw	r30, r28
     bc8:	e1 5b       	subi	r30, 0xB1	; 177
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	12 82       	std	Z+2, r1	; 0x02
	Timer0_Config.OC0_PinBehavior=NORMAL_OC0_DISCONNECTED;
     bce:	fe 01       	movw	r30, r28
     bd0:	e1 5b       	subi	r30, 0xB1	; 177
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	13 82       	std	Z+3, r1	; 0x03
	Timer0_Config.Timer0_prescaler=Timer0_F_CPU_1024;
     bd6:	fe 01       	movw	r30, r28
     bd8:	e1 5b       	subi	r30, 0xB1	; 177
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	84 83       	std	Z+4, r24	; 0x04
	Timer0_Config.Over_Flow_Interrupt=Over_Flow_Interrupt_Enable;
     be0:	fe 01       	movw	r30, r28
     be2:	e1 5b       	subi	r30, 0xB1	; 177
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	85 83       	std	Z+5, r24	; 0x05
	Timer0_Config.Compare_Match_Interrupt=Compare_Match_Interrupt_Disable;
     bea:	fe 01       	movw	r30, r28
     bec:	e1 5b       	subi	r30, 0xB1	; 177
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	16 82       	std	Z+6, r1	; 0x06
	/*
	 * Initialize the TWI:
	 * 1.same F_CPU
	 * 2.fast_mode 400 Kbs
	 */
	TWI_ConfigType TWI_Config={TWI_F_CPU_CLOCK,fast_mode};
     bf2:	ce 01       	movw	r24, r28
     bf4:	8a 5a       	subi	r24, 0xAA	; 170
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	6f 96       	adiw	r28, 0x1f	; 31
     bfa:	9f af       	std	Y+63, r25	; 0x3f
     bfc:	8e af       	std	Y+62, r24	; 0x3e
     bfe:	6f 97       	sbiw	r28, 0x1f	; 31
     c00:	29 e6       	ldi	r18, 0x69	; 105
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	a1 96       	adiw	r28, 0x21	; 33
     c06:	3f af       	std	Y+63, r19	; 0x3f
     c08:	2e af       	std	Y+62, r18	; 0x3e
     c0a:	a1 97       	sbiw	r28, 0x21	; 33
     c0c:	35 e0       	ldi	r19, 0x05	; 5
     c0e:	a2 96       	adiw	r28, 0x22	; 34
     c10:	3f af       	std	Y+63, r19	; 0x3f
     c12:	a2 97       	sbiw	r28, 0x22	; 34
     c14:	a1 96       	adiw	r28, 0x21	; 33
     c16:	ee ad       	ldd	r30, Y+62	; 0x3e
     c18:	ff ad       	ldd	r31, Y+63	; 0x3f
     c1a:	a1 97       	sbiw	r28, 0x21	; 33
     c1c:	00 80       	ld	r0, Z
     c1e:	a1 96       	adiw	r28, 0x21	; 33
     c20:	2e ad       	ldd	r18, Y+62	; 0x3e
     c22:	3f ad       	ldd	r19, Y+63	; 0x3f
     c24:	a1 97       	sbiw	r28, 0x21	; 33
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	a1 96       	adiw	r28, 0x21	; 33
     c2c:	3f af       	std	Y+63, r19	; 0x3f
     c2e:	2e af       	std	Y+62, r18	; 0x3e
     c30:	a1 97       	sbiw	r28, 0x21	; 33
     c32:	6f 96       	adiw	r28, 0x1f	; 31
     c34:	ee ad       	ldd	r30, Y+62	; 0x3e
     c36:	ff ad       	ldd	r31, Y+63	; 0x3f
     c38:	6f 97       	sbiw	r28, 0x1f	; 31
     c3a:	00 82       	st	Z, r0
     c3c:	6f 96       	adiw	r28, 0x1f	; 31
     c3e:	2e ad       	ldd	r18, Y+62	; 0x3e
     c40:	3f ad       	ldd	r19, Y+63	; 0x3f
     c42:	6f 97       	sbiw	r28, 0x1f	; 31
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	6f 96       	adiw	r28, 0x1f	; 31
     c4a:	3f af       	std	Y+63, r19	; 0x3f
     c4c:	2e af       	std	Y+62, r18	; 0x3e
     c4e:	6f 97       	sbiw	r28, 0x1f	; 31
     c50:	a2 96       	adiw	r28, 0x22	; 34
     c52:	3f ad       	ldd	r19, Y+63	; 0x3f
     c54:	a2 97       	sbiw	r28, 0x22	; 34
     c56:	31 50       	subi	r19, 0x01	; 1
     c58:	a2 96       	adiw	r28, 0x22	; 34
     c5a:	3f af       	std	Y+63, r19	; 0x3f
     c5c:	a2 97       	sbiw	r28, 0x22	; 34
     c5e:	a2 96       	adiw	r28, 0x22	; 34
     c60:	8f ad       	ldd	r24, Y+63	; 0x3f
     c62:	a2 97       	sbiw	r28, 0x22	; 34
     c64:	88 23       	and	r24, r24
     c66:	b1 f6       	brne	.-84     	; 0xc14 <main+0xce>
	TWI_init(&TWI_Config);
     c68:	ce 01       	movw	r24, r28
     c6a:	8a 5a       	subi	r24, 0xAA	; 170
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	0e 94 0c 11 	call	0x2218	; 0x2218 <TWI_init>

	/*Initialize the DcMotor */
	DcMotor_Init();
     c72:	0e 94 17 0b 	call	0x162e	; 0x162e <DcMotor_Init>

	/*Initialize the Buzzer */
	buzzer_Init();
     c76:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <buzzer_Init>

	while(1)
	{

		switch (g_recieved_message)
     c7a:	80 91 7d 00 	lds	r24, 0x007D
     c7e:	e8 2f       	mov	r30, r24
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	6d 96       	adiw	r28, 0x1d	; 29
     c84:	ff af       	std	Y+63, r31	; 0x3f
     c86:	ee af       	std	Y+62, r30	; 0x3e
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	6d 96       	adiw	r28, 0x1d	; 29
     c8c:	2e ad       	ldd	r18, Y+62	; 0x3e
     c8e:	3f ad       	ldd	r19, Y+63	; 0x3f
     c90:	6d 97       	sbiw	r28, 0x1d	; 29
     c92:	23 30       	cpi	r18, 0x03	; 3
     c94:	31 05       	cpc	r19, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <main+0x154>
     c98:	0f c2       	rjmp	.+1054   	; 0x10b8 <main+0x572>
     c9a:	6d 96       	adiw	r28, 0x1d	; 29
     c9c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
     ca0:	6d 97       	sbiw	r28, 0x1d	; 29
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	91 05       	cpc	r25, r1
     ca6:	91 f0       	breq	.+36     	; 0xccc <main+0x186>
     ca8:	6d 96       	adiw	r28, 0x1d	; 29
     caa:	ee ad       	ldd	r30, Y+62	; 0x3e
     cac:	ff ad       	ldd	r31, Y+63	; 0x3f
     cae:	6d 97       	sbiw	r28, 0x1d	; 29
     cb0:	e2 30       	cpi	r30, 0x02	; 2
     cb2:	f1 05       	cpc	r31, r1
     cb4:	11 f7       	brne	.-60     	; 0xc7a <main+0x134>
		 *  and then stay in default
		 */
		case SAVE_PASSWORD:

			/* store the password in the EEPROM */
			storeNewPassword(g_Pass_recieved);
     cb6:	81 e7       	ldi	r24, 0x71	; 113
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 83 09 	call	0x1306	; 0x1306 <storeNewPassword>

			/* Clear Array that receive the password to be ready to receive new value */
			clearArray(g_Pass_recieved);
     cbe:	81 e7       	ldi	r24, 0x71	; 113
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 93 0a 	call	0x1526	; 0x1526 <clearArray>

			g_recieved_message=0;
     cc6:	10 92 7d 00 	sts	0x007D, r1
     cca:	d7 cf       	rjmp	.-82     	; 0xc7a <main+0x134>
			break;

		case OPEN_DOOR:

			/* Read password from the EEPROM and Store it in array g_password_eeprom */
			ReadPassword();
     ccc:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadPassword>

			g_compare_value=compareTwoPasswords(g_Pass_recieved, g_password_eeprom);
     cd0:	81 e7       	ldi	r24, 0x71	; 113
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	26 e7       	ldi	r18, 0x76	; 118
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	b9 01       	movw	r22, r18
     cda:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <compareTwoPasswords>
     cde:	80 93 70 00 	sts	0x0070, r24
			if(g_compare_value == 0)
     ce2:	80 91 70 00 	lds	r24, 0x0070
     ce6:	88 23       	and	r24, r24
     ce8:	09 f0       	breq	.+2      	; 0xcec <main+0x1a6>
     cea:	98 c0       	rjmp	.+304    	; 0xe1c <main+0x2d6>
			{
				g_trialNumber=0 ;
     cec:	10 92 7c 00 	sts	0x007C, r1
				/*
				 * Sending Message to the other micro All message included in the usart.h file
				 */
				UART_sendByte(CORRECT_PASSWORD) ;
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
     cf6:	fe 01       	movw	r30, r28
     cf8:	ed 5b       	subi	r30, 0xBD	; 189
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	aa ef       	ldi	r26, 0xFA	; 250
     d02:	b3 e4       	ldi	r27, 0x43	; 67
     d04:	80 83       	st	Z, r24
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	a2 83       	std	Z+2, r26	; 0x02
     d0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0c:	8e 01       	movw	r16, r28
     d0e:	01 5c       	subi	r16, 0xC1	; 193
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	fe 01       	movw	r30, r28
     d14:	ed 5b       	subi	r30, 0xBD	; 189
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4a e7       	ldi	r20, 0x7A	; 122
     d26:	53 e4       	ldi	r21, 0x43	; 67
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	a2 83       	std	Z+2, r26	; 0x02
     d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d3a:	fe 01       	movw	r30, r28
     d3c:	ff 96       	adiw	r30, 0x3f	; 63
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	2c f4       	brge	.+10     	; 0xd60 <main+0x21a>
		__ticks = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9e af       	std	Y+62, r25	; 0x3e
     d5c:	8d af       	std	Y+61, r24	; 0x3d
     d5e:	46 c0       	rjmp	.+140    	; 0xdec <main+0x2a6>
	else if (__tmp > 65535)
     d60:	fe 01       	movw	r30, r28
     d62:	ff 96       	adiw	r30, 0x3f	; 63
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	64 f5       	brge	.+88     	; 0xdd4 <main+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	fe 01       	movw	r30, r28
     d7e:	ed 5b       	subi	r30, 0xBD	; 189
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9e af       	std	Y+62, r25	; 0x3e
     da8:	8d af       	std	Y+61, r24	; 0x3d
     daa:	0f c0       	rjmp	.+30     	; 0xdca <main+0x284>
     dac:	89 e1       	ldi	r24, 0x19	; 25
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c af       	std	Y+60, r25	; 0x3c
     db2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	8b ad       	ldd	r24, Y+59	; 0x3b
     db6:	9c ad       	ldd	r25, Y+60	; 0x3c
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <main+0x272>
     dbc:	9c af       	std	Y+60, r25	; 0x3c
     dbe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8d ad       	ldd	r24, Y+61	; 0x3d
     dc2:	9e ad       	ldd	r25, Y+62	; 0x3e
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9e af       	std	Y+62, r25	; 0x3e
     dc8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8d ad       	ldd	r24, Y+61	; 0x3d
     dcc:	9e ad       	ldd	r25, Y+62	; 0x3e
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <main+0x266>
     dd2:	16 c0       	rjmp	.+44     	; 0xe00 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	fe 01       	movw	r30, r28
     dd6:	ff 96       	adiw	r30, 0x3f	; 63
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9e af       	std	Y+62, r25	; 0x3e
     dea:	8d af       	std	Y+61, r24	; 0x3d
     dec:	8d ad       	ldd	r24, Y+61	; 0x3d
     dee:	9e ad       	ldd	r25, Y+62	; 0x3e
     df0:	9a af       	std	Y+58, r25	; 0x3a
     df2:	89 af       	std	Y+57, r24	; 0x39
     df4:	89 ad       	ldd	r24, Y+57	; 0x39
     df6:	9a ad       	ldd	r25, Y+58	; 0x3a
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2b2>
     dfc:	9a af       	std	Y+58, r25	; 0x3a
     dfe:	89 af       	std	Y+57, r24	; 0x39
				g_recieved_message=0;
				break;
			}

			/* Rotate the motor clock wise with 50% of its speed */
			DcMotor_Rotate(CW, 50);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	62 e3       	ldi	r22, 0x32	; 50
     e04:	0e 94 32 0b 	call	0x1664	; 0x1664 <DcMotor_Rotate>

			/* start the timer and wait until it count the required time */
			Timer0_setcallback(callBackFunction_rotateMotor);
     e08:	80 ec       	ldi	r24, 0xC0	; 192
     e0a:	9a e0       	ldi	r25, 0x0A	; 10
     e0c:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer0_setcallback>
			Timer0_Init(&Timer0_Config);
     e10:	ce 01       	movw	r24, r28
     e12:	81 5b       	subi	r24, 0xB1	; 177
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	0e 94 b5 0b 	call	0x176a	; 0x176a <Timer0_Init>
     e1a:	12 c1       	rjmp	.+548    	; 0x1040 <main+0x4fa>

				_delay_ms(500);
			}
			else
			{
				g_trialNumber++ ;
     e1c:	80 91 7c 00 	lds	r24, 0x007C
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 7c 00 	sts	0x007C, r24
				if (g_trialNumber ==3)
     e26:	80 91 7c 00 	lds	r24, 0x007C
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	09 f0       	breq	.+2      	; 0xe30 <main+0x2ea>
     e2e:	90 c0       	rjmp	.+288    	; 0xf50 <main+0x40a>
				{
					UART_sendByte(error) ;
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	aa ef       	ldi	r26, 0xFA	; 250
     e3c:	b3 e4       	ldi	r27, 0x43	; 67
     e3e:	8d ab       	std	Y+53, r24	; 0x35
     e40:	9e ab       	std	Y+54, r25	; 0x36
     e42:	af ab       	std	Y+55, r26	; 0x37
     e44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	6d a9       	ldd	r22, Y+53	; 0x35
     e48:	7e a9       	ldd	r23, Y+54	; 0x36
     e4a:	8f a9       	ldd	r24, Y+55	; 0x37
     e4c:	98 ad       	ldd	r25, Y+56	; 0x38
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a e7       	ldi	r20, 0x7A	; 122
     e54:	53 e4       	ldi	r21, 0x43	; 67
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	89 ab       	std	Y+49, r24	; 0x31
     e60:	9a ab       	std	Y+50, r25	; 0x32
     e62:	ab ab       	std	Y+51, r26	; 0x33
     e64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <main+0x342>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	98 ab       	std	Y+48, r25	; 0x30
     e84:	8f a7       	std	Y+47, r24	; 0x2f
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <main+0x3c0>
	else if (__tmp > 65535)
     e88:	69 a9       	ldd	r22, Y+49	; 0x31
     e8a:	7a a9       	ldd	r23, Y+50	; 0x32
     e8c:	8b a9       	ldd	r24, Y+51	; 0x33
     e8e:	9c a9       	ldd	r25, Y+52	; 0x34
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <main+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	6d a9       	ldd	r22, Y+53	; 0x35
     ea2:	7e a9       	ldd	r23, Y+54	; 0x36
     ea4:	8f a9       	ldd	r24, Y+55	; 0x37
     ea6:	98 ad       	ldd	r25, Y+56	; 0x38
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	98 ab       	std	Y+48, r25	; 0x30
     ec6:	8f a7       	std	Y+47, r24	; 0x2f
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <main+0x3a2>
     eca:	89 e1       	ldi	r24, 0x19	; 25
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e a7       	std	Y+46, r25	; 0x2e
     ed0:	8d a7       	std	Y+45, r24	; 0x2d
     ed2:	8d a5       	ldd	r24, Y+45	; 0x2d
     ed4:	9e a5       	ldd	r25, Y+46	; 0x2e
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <main+0x390>
     eda:	9e a7       	std	Y+46, r25	; 0x2e
     edc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee0:	98 a9       	ldd	r25, Y+48	; 0x30
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	98 ab       	std	Y+48, r25	; 0x30
     ee6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eea:	98 a9       	ldd	r25, Y+48	; 0x30
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <main+0x384>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <main+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	69 a9       	ldd	r22, Y+49	; 0x31
     ef4:	7a a9       	ldd	r23, Y+50	; 0x32
     ef6:	8b a9       	ldd	r24, Y+51	; 0x33
     ef8:	9c a9       	ldd	r25, Y+52	; 0x34
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	98 ab       	std	Y+48, r25	; 0x30
     f04:	8f a7       	std	Y+47, r24	; 0x2f
     f06:	8f a5       	ldd	r24, Y+47	; 0x2f
     f08:	98 a9       	ldd	r25, Y+48	; 0x30
     f0a:	9c a7       	std	Y+44, r25	; 0x2c
     f0c:	8b a7       	std	Y+43, r24	; 0x2b
     f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f10:	9c a5       	ldd	r25, Y+44	; 0x2c
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <main+0x3cc>
     f16:	9c a7       	std	Y+44, r25	; 0x2c
     f18:	8b a7       	std	Y+43, r24	; 0x2b

					_delay_ms(500);

					Timer0_setcallback(callBackFunction_buzzer);
     f1a:	8a ef       	ldi	r24, 0xFA	; 250
     f1c:	9a e0       	ldi	r25, 0x0A	; 10
     f1e:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer0_setcallback>
					Timer0_Init(&Timer0_Config);
     f22:	ce 01       	movw	r24, r28
     f24:	81 5b       	subi	r24, 0xB1	; 177
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	0e 94 b5 0b 	call	0x176a	; 0x176a <Timer0_Init>
					buzzer_on();
     f2c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <buzzer_on>
					/* Loop to stay in it until the timer finish interrupts */
					while(interrupt_flag !=0){}
     f30:	80 91 68 00 	lds	r24, 0x0068
     f34:	88 23       	and	r24, r24
     f36:	e1 f7       	brne	.-8      	; 0xf30 <main+0x3ea>
					/* Clear make the flag equal 1 to ready for the next loop */
					interrupt_flag=1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 68 00 	sts	0x0068, r24
					Timer0_DeInit();
     f3e:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timer0_DeInit>
					buzzer_off();
     f42:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <buzzer_off>

					g_trialNumber =0;
     f46:	10 92 7c 00 	sts	0x007C, r1
					g_recieved_message=0;
     f4a:	10 92 7d 00 	sts	0x007D, r1
     f4e:	95 ce       	rjmp	.-726    	; 0xc7a <main+0x134>
					break;
				}

				UART_sendByte(WRONG_PASSWORD);
     f50:	86 e0       	ldi	r24, 0x06	; 6
     f52:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	aa ef       	ldi	r26, 0xFA	; 250
     f5c:	b3 e4       	ldi	r27, 0x43	; 67
     f5e:	8f a3       	std	Y+39, r24	; 0x27
     f60:	98 a7       	std	Y+40, r25	; 0x28
     f62:	a9 a7       	std	Y+41, r26	; 0x29
     f64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f66:	6f a1       	ldd	r22, Y+39	; 0x27
     f68:	78 a5       	ldd	r23, Y+40	; 0x28
     f6a:	89 a5       	ldd	r24, Y+41	; 0x29
     f6c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	53 e4       	ldi	r21, 0x43	; 67
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8b a3       	std	Y+35, r24	; 0x23
     f80:	9c a3       	std	Y+36, r25	; 0x24
     f82:	ad a3       	std	Y+37, r26	; 0x25
     f84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f86:	6b a1       	ldd	r22, Y+35	; 0x23
     f88:	7c a1       	ldd	r23, Y+36	; 0x24
     f8a:	8d a1       	ldd	r24, Y+37	; 0x25
     f8c:	9e a1       	ldd	r25, Y+38	; 0x26
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	5f e3       	ldi	r21, 0x3F	; 63
     f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <main+0x462>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9a a3       	std	Y+34, r25	; 0x22
     fa4:	89 a3       	std	Y+33, r24	; 0x21
     fa6:	3f c0       	rjmp	.+126    	; 0x1026 <main+0x4e0>
	else if (__tmp > 65535)
     fa8:	6b a1       	ldd	r22, Y+35	; 0x23
     faa:	7c a1       	ldd	r23, Y+36	; 0x24
     fac:	8d a1       	ldd	r24, Y+37	; 0x25
     fae:	9e a1       	ldd	r25, Y+38	; 0x26
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	4f e7       	ldi	r20, 0x7F	; 127
     fb6:	57 e4       	ldi	r21, 0x47	; 71
     fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbc:	18 16       	cp	r1, r24
     fbe:	4c f5       	brge	.+82     	; 0x1012 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc0:	6f a1       	ldd	r22, Y+39	; 0x27
     fc2:	78 a5       	ldd	r23, Y+40	; 0x28
     fc4:	89 a5       	ldd	r24, Y+41	; 0x29
     fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e2       	ldi	r20, 0x20	; 32
     fce:	51 e4       	ldi	r21, 0x41	; 65
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9a a3       	std	Y+34, r25	; 0x22
     fe6:	89 a3       	std	Y+33, r24	; 0x21
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <main+0x4c2>
     fea:	89 e1       	ldi	r24, 0x19	; 25
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 a3       	std	Y+32, r25	; 0x20
     ff0:	8f 8f       	std	Y+31, r24	; 0x1f
     ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff4:	98 a1       	ldd	r25, Y+32	; 0x20
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <main+0x4b0>
     ffa:	98 a3       	std	Y+32, r25	; 0x20
     ffc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    1000:	9a a1       	ldd	r25, Y+34	; 0x22
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	9a a3       	std	Y+34, r25	; 0x22
    1006:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	89 a1       	ldd	r24, Y+33	; 0x21
    100a:	9a a1       	ldd	r25, Y+34	; 0x22
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f7       	brne	.-38     	; 0xfea <main+0x4a4>
    1010:	14 c0       	rjmp	.+40     	; 0x103a <main+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1012:	6b a1       	ldd	r22, Y+35	; 0x23
    1014:	7c a1       	ldd	r23, Y+36	; 0x24
    1016:	8d a1       	ldd	r24, Y+37	; 0x25
    1018:	9e a1       	ldd	r25, Y+38	; 0x26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9a a3       	std	Y+34, r25	; 0x22
    1024:	89 a3       	std	Y+33, r24	; 0x21
    1026:	89 a1       	ldd	r24, Y+33	; 0x21
    1028:	9a a1       	ldd	r25, Y+34	; 0x22
    102a:	9e 8f       	std	Y+30, r25	; 0x1e
    102c:	8d 8f       	std	Y+29, r24	; 0x1d
    102e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1030:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <main+0x4ec>
    1036:	9e 8f       	std	Y+30, r25	; 0x1e
    1038:	8d 8f       	std	Y+29, r24	; 0x1d

				_delay_ms(500);

				g_recieved_message=0;
    103a:	10 92 7d 00 	sts	0x007D, r1
    103e:	1d ce       	rjmp	.-966    	; 0xc7a <main+0x134>

			/* start the timer and wait until it count the required time */
			Timer0_setcallback(callBackFunction_rotateMotor);
			Timer0_Init(&Timer0_Config);

			while(interrupt_flag !=0){}
    1040:	80 91 68 00 	lds	r24, 0x0068
    1044:	88 23       	and	r24, r24
    1046:	e1 f7       	brne	.-8      	; 0x1040 <main+0x4fa>
			interrupt_flag=1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	80 93 68 00 	sts	0x0068, r24
			Timer0_DeInit();
    104e:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timer0_DeInit>

			DcMotor_Rotate(OFF, 0);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	0e 94 32 0b 	call	0x1664	; 0x1664 <DcMotor_Rotate>

			Timer0_setcallback(callBackFunction_holdMotor);
    105a:	8d ed       	ldi	r24, 0xDD	; 221
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    105e:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer0_setcallback>
			Timer0_Init(&Timer0_Config);
    1062:	ce 01       	movw	r24, r28
    1064:	81 5b       	subi	r24, 0xB1	; 177
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	0e 94 b5 0b 	call	0x176a	; 0x176a <Timer0_Init>

			while(interrupt_flag !=0){}
    106c:	80 91 68 00 	lds	r24, 0x0068
    1070:	88 23       	and	r24, r24
    1072:	e1 f7       	brne	.-8      	; 0x106c <main+0x526>
			interrupt_flag=1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 68 00 	sts	0x0068, r24
			Timer0_DeInit();
    107a:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timer0_DeInit>

			DcMotor_Rotate(CCW, 50);
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	62 e3       	ldi	r22, 0x32	; 50
    1082:	0e 94 32 0b 	call	0x1664	; 0x1664 <DcMotor_Rotate>

			Timer0_setcallback(callBackFunction_rotateMotor);
    1086:	80 ec       	ldi	r24, 0xC0	; 192
    1088:	9a e0       	ldi	r25, 0x0A	; 10
    108a:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer0_setcallback>
			Timer0_Init(&Timer0_Config);
    108e:	ce 01       	movw	r24, r28
    1090:	81 5b       	subi	r24, 0xB1	; 177
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	0e 94 b5 0b 	call	0x176a	; 0x176a <Timer0_Init>

			while(interrupt_flag !=0){}
    1098:	80 91 68 00 	lds	r24, 0x0068
    109c:	88 23       	and	r24, r24
    109e:	e1 f7       	brne	.-8      	; 0x1098 <main+0x552>
			interrupt_flag=1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 68 00 	sts	0x0068, r24
			Timer0_DeInit();
    10a6:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timer0_DeInit>

			DcMotor_Rotate(OFF, 0);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	0e 94 32 0b 	call	0x1664	; 0x1664 <DcMotor_Rotate>

			g_recieved_message=0;
    10b2:	10 92 7d 00 	sts	0x007D, r1
    10b6:	e1 cd       	rjmp	.-1086   	; 0xc7a <main+0x134>

			break;

		case CHANGE_PASSWORD:

			ReadPassword();
    10b8:	0e 94 32 0a 	call	0x1464	; 0x1464 <ReadPassword>

			g_compare_value=compareTwoPasswords(g_Pass_recieved, g_password_eeprom);
    10bc:	81 e7       	ldi	r24, 0x71	; 113
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	26 e7       	ldi	r18, 0x76	; 118
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	b9 01       	movw	r22, r18
    10c6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <compareTwoPasswords>
    10ca:	80 93 70 00 	sts	0x0070, r24
			if(g_compare_value == 0)
    10ce:	80 91 70 00 	lds	r24, 0x0070
    10d2:	88 23       	and	r24, r24
    10d4:	31 f4       	brne	.+12     	; 0x10e2 <main+0x59c>
			{
				UART_sendByte(NEW_PASSWORD);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
				g_recieved_message=0;

				break;
			}

			g_recieved_message=0;
    10dc:	10 92 7d 00 	sts	0x007D, r1
    10e0:	cc cd       	rjmp	.-1128   	; 0xc7a <main+0x134>
				UART_sendByte(NEW_PASSWORD);

			}
			else
			{
				g_trialNumber++ ;
    10e2:	80 91 7c 00 	lds	r24, 0x007C
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 7c 00 	sts	0x007C, r24
				if (g_trialNumber ==3)
    10ec:	80 91 7c 00 	lds	r24, 0x007C
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0x5b0>
    10f4:	90 c0       	rjmp	.+288    	; 0x1216 <main+0x6d0>
				{
					UART_sendByte(error) ;
    10f6:	87 e0       	ldi	r24, 0x07	; 7
    10f8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	aa ef       	ldi	r26, 0xFA	; 250
    1102:	b3 e4       	ldi	r27, 0x43	; 67
    1104:	89 8f       	std	Y+25, r24	; 0x19
    1106:	9a 8f       	std	Y+26, r25	; 0x1a
    1108:	ab 8f       	std	Y+27, r26	; 0x1b
    110a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	69 8d       	ldd	r22, Y+25	; 0x19
    110e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4a e7       	ldi	r20, 0x7A	; 122
    111a:	53 e4       	ldi	r21, 0x43	; 67
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8d 8b       	std	Y+21, r24	; 0x15
    1126:	9e 8b       	std	Y+22, r25	; 0x16
    1128:	af 8b       	std	Y+23, r26	; 0x17
    112a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    112c:	6d 89       	ldd	r22, Y+21	; 0x15
    112e:	7e 89       	ldd	r23, Y+22	; 0x16
    1130:	8f 89       	ldd	r24, Y+23	; 0x17
    1132:	98 8d       	ldd	r25, Y+24	; 0x18
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <main+0x608>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	8b 8b       	std	Y+19, r24	; 0x13
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <main+0x686>
	else if (__tmp > 65535)
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <main+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	69 8d       	ldd	r22, Y+25	; 0x19
    1168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    116c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9c 8b       	std	Y+20, r25	; 0x14
    118c:	8b 8b       	std	Y+19, r24	; 0x13
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <main+0x668>
    1190:	89 e1       	ldi	r24, 0x19	; 25
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9a 8b       	std	Y+18, r25	; 0x12
    1196:	89 8b       	std	Y+17, r24	; 0x11
    1198:	89 89       	ldd	r24, Y+17	; 0x11
    119a:	9a 89       	ldd	r25, Y+18	; 0x12
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x656>
    11a0:	9a 8b       	std	Y+18, r25	; 0x12
    11a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8b 89       	ldd	r24, Y+19	; 0x13
    11a6:	9c 89       	ldd	r25, Y+20	; 0x14
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9c 8b       	std	Y+20, r25	; 0x14
    11ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <main+0x64a>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ba:	7e 89       	ldd	r23, Y+22	; 0x16
    11bc:	8f 89       	ldd	r24, Y+23	; 0x17
    11be:	98 8d       	ldd	r25, Y+24	; 0x18
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	98 8b       	std	Y+16, r25	; 0x10
    11d2:	8f 87       	std	Y+15, r24	; 0x0f
    11d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d6:	98 89       	ldd	r25, Y+16	; 0x10
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <main+0x692>
    11dc:	98 8b       	std	Y+16, r25	; 0x10
    11de:	8f 87       	std	Y+15, r24	; 0x0f

					_delay_ms(500);

					Timer0_setcallback(callBackFunction_buzzer);
    11e0:	8a ef       	ldi	r24, 0xFA	; 250
    11e2:	9a e0       	ldi	r25, 0x0A	; 10
    11e4:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer0_setcallback>
					Timer0_Init(&Timer0_Config);
    11e8:	ce 01       	movw	r24, r28
    11ea:	81 5b       	subi	r24, 0xB1	; 177
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	0e 94 b5 0b 	call	0x176a	; 0x176a <Timer0_Init>

					buzzer_on();
    11f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <buzzer_on>

					while(interrupt_flag !=0){}
    11f6:	80 91 68 00 	lds	r24, 0x0068
    11fa:	88 23       	and	r24, r24
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <main+0x6b0>
					interrupt_flag=1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 68 00 	sts	0x0068, r24
					Timer0_DeInit();
    1204:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timer0_DeInit>

					buzzer_off();
    1208:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <buzzer_off>

					g_trialNumber =0;
    120c:	10 92 7c 00 	sts	0x007C, r1
					g_recieved_message=0;
    1210:	10 92 7d 00 	sts	0x007D, r1
    1214:	32 cd       	rjmp	.-1436   	; 0xc7a <main+0x134>

					break;
				}
				UART_sendByte(WRONG_PASSWORD);
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	aa ef       	ldi	r26, 0xFA	; 250
    1222:	b3 e4       	ldi	r27, 0x43	; 67
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ad 87       	std	Y+13, r26	; 0x0d
    122a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	53 e4       	ldi	r21, 0x43	; 67
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 83       	std	Y+7, r24	; 0x07
    1246:	98 87       	std	Y+8, r25	; 0x08
    1248:	a9 87       	std	Y+9, r26	; 0x09
    124a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <main+0x728>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <main+0x7a6>
	else if (__tmp > 65535)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <main+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <main+0x788>
    12b0:	89 e1       	ldi	r24, 0x19	; 25
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <main+0x776>
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <main+0x76a>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <main+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <main+0x7b2>
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(500);

				g_recieved_message=0;
    1300:	10 92 7d 00 	sts	0x007D, r1
    1304:	ba cc       	rjmp	.-1676   	; 0xc7a <main+0x134>

00001306 <storeNewPassword>:
/*
 * Description:
 * Function to take the password and store it in the EEPROM
 */
void storeNewPassword (uint8 array[])
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	63 97       	sbiw	r28, 0x13	; 19
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	9b 8b       	std	Y+19, r25	; 0x13
    131c:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 index=0 ;
    131e:	19 8a       	std	Y+17, r1	; 0x11
	/* address of the eeprom */
	uint16 add=0x0300;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	98 8b       	std	Y+16, r25	; 0x10
    1326:	8f 87       	std	Y+15, r24	; 0x0f
    1328:	88 c0       	rjmp	.+272    	; 0x143a <storeNewPassword+0x134>
	while(array[index] != '\0')
	{
		/* Write in the external EEPROM */
		EEPROM_writeByte(add, array[index]);
    132a:	89 89       	ldd	r24, Y+17	; 0x11
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8a 89       	ldd	r24, Y+18	; 0x12
    1332:	9b 89       	ldd	r25, Y+19	; 0x13
    1334:	fc 01       	movw	r30, r24
    1336:	e2 0f       	add	r30, r18
    1338:	f3 1f       	adc	r31, r19
    133a:	20 81       	ld	r18, Z
    133c:	8f 85       	ldd	r24, Y+15	; 0x0f
    133e:	98 89       	ldd	r25, Y+16	; 0x10
    1340:	62 2f       	mov	r22, r18
    1342:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <EEPROM_writeByte>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e2       	ldi	r26, 0x20	; 32
    134c:	b1 e4       	ldi	r27, 0x41	; 65
    134e:	8b 87       	std	Y+11, r24	; 0x0b
    1350:	9c 87       	std	Y+12, r25	; 0x0c
    1352:	ad 87       	std	Y+13, r26	; 0x0d
    1354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a e7       	ldi	r20, 0x7A	; 122
    1364:	53 e4       	ldi	r21, 0x43	; 67
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8f 83       	std	Y+7, r24	; 0x07
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	a9 87       	std	Y+9, r26	; 0x09
    1374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <storeNewPassword+0x92>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <storeNewPassword+0x110>
	else if (__tmp > 65535)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <storeNewPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <storeNewPassword+0xf2>
    13da:	89 e1       	ldi	r24, 0x19	; 25
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <storeNewPassword+0xe0>
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <storeNewPassword+0xd4>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <storeNewPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <storeNewPassword+0x11c>
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
		/* delay time as the eeprom take 10ms to make a write*/
		_delay_ms(10) ;
		add++ ;
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	98 89       	ldd	r25, Y+16	; 0x10
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	98 8b       	std	Y+16, r25	; 0x10
    1432:	8f 87       	std	Y+15, r24	; 0x0f
		index++ ;
    1434:	89 89       	ldd	r24, Y+17	; 0x11
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	89 8b       	std	Y+17, r24	; 0x11
void storeNewPassword (uint8 array[])
{
	uint8 index=0 ;
	/* address of the eeprom */
	uint16 add=0x0300;
	while(array[index] != '\0')
    143a:	89 89       	ldd	r24, Y+17	; 0x11
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8a 89       	ldd	r24, Y+18	; 0x12
    1442:	9b 89       	ldd	r25, Y+19	; 0x13
    1444:	fc 01       	movw	r30, r24
    1446:	e2 0f       	add	r30, r18
    1448:	f3 1f       	adc	r31, r19
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	09 f0       	breq	.+2      	; 0x1452 <storeNewPassword+0x14c>
    1450:	6c cf       	rjmp	.-296    	; 0x132a <storeNewPassword+0x24>
		/* delay time as the eeprom take 10ms to make a write*/
		_delay_ms(10) ;
		add++ ;
		index++ ;
	}
}
    1452:	63 96       	adiw	r28, 0x13	; 19
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <ReadPassword>:
/*
 * Description:
 * Function to get the stored password in the EEPROM and store it in Array
 */
void ReadPassword ()
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <ReadPassword+0x6>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	uint8 counter = 0;
    1470:	1b 82       	std	Y+3, r1	; 0x03
	uint16 i2cAddress=0x0300;
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <ReadPassword+0x3e>
	while(counter < 4)
	{
		EEPROM_readByte(i2cAddress, &g_password_eeprom[counter]);
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 01       	movw	r18, r24
    1484:	2a 58       	subi	r18, 0x8A	; 138
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <EEPROM_readByte>
		counter++;
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	8b 83       	std	Y+3, r24	; 0x03
		i2cAddress++;
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
 */
void ReadPassword ()
{
	uint8 counter = 0;
	uint16 i2cAddress=0x0300;
	while(counter < 4)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	50 f3       	brcs	.-44     	; 0x147c <ReadPassword+0x18>
	LCD_intgerToString(g_password_eeprom[1]);

	LCD_intgerToString(g_password_eeprom[2]);

	LCD_intgerToString(g_password_eeprom[3]);*/
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <compareTwoPasswords>:
/*
 * Description:
 * Function compare two array stored in them two different password
 */
uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[])
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <compareTwoPasswords+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <compareTwoPasswords+0x8>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <compareTwoPasswords+0xa>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	7e 83       	std	Y+6, r23	; 0x06
    14c8:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count = 0;
    14ca:	1a 82       	std	Y+2, r1	; 0x02
	sint8 i;
	for (i = 0; i < 4; i++)
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	1e c0       	rjmp	.+60     	; 0x150c <compareTwoPasswords+0x58>
	{
		if (arr1[i] != arr2[i])
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	33 27       	eor	r19, r19
    14d6:	27 fd       	sbrc	r18, 7
    14d8:	30 95       	com	r19
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	fc 01       	movw	r30, r24
    14e0:	e2 0f       	add	r30, r18
    14e2:	f3 1f       	adc	r31, r19
    14e4:	40 81       	ld	r20, Z
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	33 27       	eor	r19, r19
    14ec:	27 fd       	sbrc	r18, 7
    14ee:	30 95       	com	r19
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	fc 01       	movw	r30, r24
    14f6:	e2 0f       	add	r30, r18
    14f8:	f3 1f       	adc	r31, r19
    14fa:	80 81       	ld	r24, Z
    14fc:	48 17       	cp	r20, r24
    14fe:	19 f0       	breq	.+6      	; 0x1506 <compareTwoPasswords+0x52>
		{
			count++;
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[])
{
	uint8 count = 0;
	sint8 i;
	for (i = 0; i < 4; i++)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	fc f2       	brlt	.-66     	; 0x14d0 <compareTwoPasswords+0x1c>
		if (arr1[i] != arr2[i])
		{
			count++;
		}
	}
	return count;
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1514:	26 96       	adiw	r28, 0x06	; 6
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <clearArray>:
/*
 * Description:
 * function to clear an array
 */
void clearArray(uint8 *a_Ptr)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <clearArray+0x6>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9b 83       	std	Y+3, r25	; 0x03
    1534:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index=0;
    1536:	19 82       	std	Y+1, r1	; 0x01
    1538:	09 c0       	rjmp	.+18     	; 0x154c <clearArray+0x26>
	while(a_Ptr[index]!='\0')
	{
		a_Ptr[index]=0;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	9b 81       	ldd	r25, Y+3	; 0x03
    1544:	fc 01       	movw	r30, r24
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	10 82       	st	Z, r1
 * function to clear an array
 */
void clearArray(uint8 *a_Ptr)
{
	uint8 index=0;
	while(a_Ptr[index]!='\0')
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	fc 01       	movw	r30, r24
    1558:	e2 0f       	add	r30, r18
    155a:	f3 1f       	adc	r31, r19
    155c:	80 81       	ld	r24, Z
    155e:	88 23       	and	r24, r24
    1560:	61 f7       	brne	.-40     	; 0x153a <clearArray+0x14>
	{
		a_Ptr[index]=0;
	}
	a_Ptr[index]=0;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	fc 01       	movw	r30, r24
    156e:	e2 0f       	add	r30, r18
    1570:	f3 1f       	adc	r31, r19
    1572:	10 82       	st	Z, r1
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <callBackFunction_rotateMotor>:
/*
 * Description:
 * Rotating motor call back function
 */
void callBackFunction_rotateMotor ()
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	timercounter++;
    1588:	80 91 7a 00 	lds	r24, 0x007A
    158c:	90 91 7b 00 	lds	r25, 0x007B
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	90 93 7b 00 	sts	0x007B, r25
    1596:	80 93 7a 00 	sts	0x007A, r24
	if(timercounter == NUMBER_OVER_FLOW_ROTATE)
    159a:	80 91 7a 00 	lds	r24, 0x007A
    159e:	90 91 7b 00 	lds	r25, 0x007B
    15a2:	87 33       	cpi	r24, 0x37	; 55
    15a4:	91 05       	cpc	r25, r1
    15a6:	31 f4       	brne	.+12     	; 0x15b4 <callBackFunction_rotateMotor+0x34>
	{
		interrupt_flag=0;
    15a8:	10 92 68 00 	sts	0x0068, r1
		timercounter=0;
    15ac:	10 92 7b 00 	sts	0x007B, r1
    15b0:	10 92 7a 00 	sts	0x007A, r1
	}
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <callBackFunction_holdMotor>:
/*
 * Description:
 * Holding Motor call back function
 */
void callBackFunction_holdMotor ()
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	timercounter++;
    15c2:	80 91 7a 00 	lds	r24, 0x007A
    15c6:	90 91 7b 00 	lds	r25, 0x007B
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	90 93 7b 00 	sts	0x007B, r25
    15d0:	80 93 7a 00 	sts	0x007A, r24
	if(timercounter == NUMBER_OVER_FLOW_HOLD)
    15d4:	80 91 7a 00 	lds	r24, 0x007A
    15d8:	90 91 7b 00 	lds	r25, 0x007B
    15dc:	8f 30       	cpi	r24, 0x0F	; 15
    15de:	91 05       	cpc	r25, r1
    15e0:	31 f4       	brne	.+12     	; 0x15ee <callBackFunction_holdMotor+0x34>
	{
		interrupt_flag=0;
    15e2:	10 92 68 00 	sts	0x0068, r1
		timercounter=0;
    15e6:	10 92 7b 00 	sts	0x007B, r1
    15ea:	10 92 7a 00 	sts	0x007A, r1
	}
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <callBackFunction_buzzer>:
/*
 * Description:
 * Buzzer call back Function
 */
void callBackFunction_buzzer ()
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	timercounter++;
    15fc:	80 91 7a 00 	lds	r24, 0x007A
    1600:	90 91 7b 00 	lds	r25, 0x007B
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	90 93 7b 00 	sts	0x007B, r25
    160a:	80 93 7a 00 	sts	0x007A, r24
	if(timercounter == NUMBER_OVER_FLOW_BUZZER)
    160e:	80 91 7a 00 	lds	r24, 0x007A
    1612:	90 91 7b 00 	lds	r25, 0x007B
    1616:	8a 3f       	cpi	r24, 0xFA	; 250
    1618:	91 05       	cpc	r25, r1
    161a:	31 f4       	brne	.+12     	; 0x1628 <callBackFunction_buzzer+0x34>
	{
		interrupt_flag=0;
    161c:	10 92 68 00 	sts	0x0068, r1
		timercounter=0;
    1620:	10 92 7b 00 	sts	0x007B, r1
    1624:	10 92 7a 00 	sts	0x007A, r1
	}
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DcMotor_Init>:
 * Description:
 * the Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	/* setup the direction for the two motor pins through the GPIO driver*/
	GPIO_setupPinDirection(Motor_PORT_ID,Motor_PIN1_ID,PIN_OUTPUT);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(Motor_PORT_ID,Motor_PIN2_ID,PIN_OUTPUT);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_setupPinDirection>

	/*Stop at the DC-Motor at the beginning through the GPIO driver */
	GPIO_writePin(Motor_PORT_ID,Motor_PIN1_ID,LOGIC_LOW);
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>

	GPIO_writePin(Motor_PORT_ID,Motor_PIN2_ID,LOGIC_LOW);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <DcMotor_Rotate>:
 *  The function responsible for rotate the DC Motor CW/ or A-CW or
 *  stop the motor based on the state input state value.
 *   Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <DcMotor_Rotate+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <DcMotor_Rotate+0x8>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
	switch (state)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3c 83       	std	Y+4, r19	; 0x04
    167c:	2b 83       	std	Y+3, r18	; 0x03
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <DcMotor_Rotate+0x4c>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	e9 f0       	breq	.+58     	; 0x16cc <DcMotor_Rotate+0x68>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	39 f5       	brne	.+78     	; 0x16e8 <DcMotor_Rotate+0x84>
	{
	case OFF:
		GPIO_writePin(Motor_PORT_ID,Motor_PIN1_ID,LOGIC_LOW);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		GPIO_writePin(Motor_PORT_ID,Motor_PIN2_ID,LOGIC_LOW);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
    16ae:	26 c0       	rjmp	.+76     	; 0x16fc <DcMotor_Rotate+0x98>
		break;

	case CW:
		GPIO_writePin(Motor_PORT_ID,Motor_PIN1_ID,LOGIC_HIGH);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		GPIO_writePin(Motor_PORT_ID,Motor_PIN2_ID,LOGIC_LOW);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		PWM_Timer2_Start(speed);
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	0e 94 85 0b 	call	0x170a	; 0x170a <PWM_Timer2_Start>
    16ca:	18 c0       	rjmp	.+48     	; 0x16fc <DcMotor_Rotate+0x98>
		break;

	case CCW:
		GPIO_writePin(Motor_PORT_ID,Motor_PIN1_ID,LOGIC_LOW);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		GPIO_writePin(Motor_PORT_ID,Motor_PIN2_ID,LOGIC_HIGH);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		PWM_Timer2_Start(speed);
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	0e 94 85 0b 	call	0x170a	; 0x170a <PWM_Timer2_Start>
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <DcMotor_Rotate+0x98>
		break;

	default:
		GPIO_writePin(Motor_PORT_ID,Motor_PIN1_ID,LOGIC_LOW);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		GPIO_writePin(Motor_PORT_ID,Motor_PIN2_ID,LOGIC_LOW);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
		break;

	}

}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <PWM_Timer2_Start>:
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer2_Start(uint8 duty_cycle)

{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = (1<<WGM20) |(1<<WGM21) | (1<<COM21) | (1<<CS21);
    1716:	e5 e4       	ldi	r30, 0x45	; 69
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a e6       	ldi	r24, 0x6A	; 106
    171c:	80 83       	st	Z, r24

	/* Clear the timer */
	TCNT2 = 0;
    171e:	e4 e4       	ldi	r30, 0x44	; 68
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	10 82       	st	Z, r1

	/* Setting the output compare register value */
	OCR2 = (duty_cycle*255)/100;
    1724:	e3 e4       	ldi	r30, 0x43	; 67
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	48 2f       	mov	r20, r24
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	ca 01       	movw	r24, r20
    1730:	9c 01       	movw	r18, r24
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	c9 01       	movw	r24, r18
    1738:	96 95       	lsr	r25
    173a:	98 2f       	mov	r25, r24
    173c:	88 27       	eor	r24, r24
    173e:	97 95       	ror	r25
    1740:	87 95       	ror	r24
    1742:	82 1b       	sub	r24, r18
    1744:	93 0b       	sbc	r25, r19
    1746:	84 0f       	add	r24, r20
    1748:	95 1f       	adc	r25, r21
    174a:	24 e6       	ldi	r18, 0x64	; 100
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	b9 01       	movw	r22, r18
    1750:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodhi4>
    1754:	cb 01       	movw	r24, r22
    1756:	80 83       	st	Z, r24

	/* Setup the direction for OC0 as output pin through the GPIO driver */
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	63 e0       	ldi	r22, 0x03	; 3
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_setupPinDirection>

}
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <Timer0_Init>:
 * 	2.Initial start value for Timer0
 * 	3.Initial Compare value for Timer0
 * 	4.Initialize the pre-scaler value
 */
void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <Timer0_Init+0x6>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <Timer0_Init+0x8>
    1772:	0f 92       	push	r0
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the timer will operate in Normal mode or Compare mode
	 * If it's normal mode put Initial value to start the timer from in TCNT0
	 * If Compare or PWM mode Put compare value in OCR0
	 */
	if(Config_Ptr->Timer0_mode == NORMAL_MODE)
    177c:	e9 81       	ldd	r30, Y+1	; 0x01
    177e:	fa 81       	ldd	r31, Y+2	; 0x02
    1780:	80 81       	ld	r24, Z
    1782:	88 23       	and	r24, r24
    1784:	49 f4       	brne	.+18     	; 0x1798 <Timer0_Init+0x2e>
	{
		/*Initial start value for Timer0*/
		TCNT0=Config_Ptr->Timer0_InitialValue;
    1786:	e2 e5       	ldi	r30, 0x52	; 82
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	a9 81       	ldd	r26, Y+1	; 0x01
    178c:	ba 81       	ldd	r27, Y+2	; 0x02
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	8c 91       	ld	r24, X
    1792:	11 97       	sbiw	r26, 0x01	; 1
    1794:	80 83       	st	Z, r24
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <Timer0_Init+0x3e>
	}
	else
	{
		/*Initial Compare value for Timer0*/
		OCR0=Config_Ptr->Timer0_InitialValue;
    1798:	ec e5       	ldi	r30, 0x5C	; 92
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	a9 81       	ldd	r26, Y+1	; 0x01
    179e:	ba 81       	ldd	r27, Y+2	; 0x02
    17a0:	11 96       	adiw	r26, 0x01	; 1
    17a2:	8c 91       	ld	r24, X
    17a4:	11 97       	sbiw	r26, 0x01	; 1
    17a6:	80 83       	st	Z, r24

	/*
	 * Force Output Compare
	 * FOC0 bit is active only when the timer0 mode a non-PWM mode
	 */
	TCCR0 = ( (!(Config_Ptr->Timer0_mode) & 0x01) <<FOC0);
    17a8:	83 e5       	ldi	r24, 0x53	; 83
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9d 83       	std	Y+5, r25	; 0x05
    17ae:	8c 83       	std	Y+4, r24	; 0x04
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	80 81       	ld	r24, Z
    17b6:	88 23       	and	r24, r24
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <Timer0_Init+0x56>
    17ba:	90 e8       	ldi	r25, 0x80	; 128
    17bc:	9b 83       	std	Y+3, r25	; 0x03
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <Timer0_Init+0x58>
    17c0:	1b 82       	std	Y+3, r1	; 0x03
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	ec 81       	ldd	r30, Y+4	; 0x04
    17c6:	fd 81       	ldd	r31, Y+5	; 0x05
    17c8:	80 83       	st	Z, r24

	/*
	 * Initialize Timer0 mode by WGM00 & WGM01 bits
	 */
	TCCR0 |= (((Config_Ptr->Timer0_mode) & 0x01) <<WGM00) |((((Config_Ptr->Timer0_mode) & 0x02)>>1) <<WGM01);
    17ca:	a3 e5       	ldi	r26, 0x53	; 83
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e3 e5       	ldi	r30, 0x53	; 83
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	38 2f       	mov	r19, r24
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	80 81       	ld	r24, Z
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	00 24       	eor	r0, r0
    17e6:	96 95       	lsr	r25
    17e8:	87 95       	ror	r24
    17ea:	07 94       	ror	r0
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	07 94       	ror	r0
    17f2:	98 2f       	mov	r25, r24
    17f4:	80 2d       	mov	r24, r0
    17f6:	28 2f       	mov	r18, r24
    17f8:	e9 81       	ldd	r30, Y+1	; 0x01
    17fa:	fa 81       	ldd	r31, Y+2	; 0x02
    17fc:	80 81       	ld	r24, Z
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	82 70       	andi	r24, 0x02	; 2
    1804:	90 70       	andi	r25, 0x00	; 0
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	82 2b       	or	r24, r18
    1818:	83 2b       	or	r24, r19
    181a:	8c 93       	st	X, r24

	/*
	 * when working in CTC or PWM mode you can use OC0 pin
	 * we adjust the behavior of pin OC0 by COM00 & COM01 bits
	 */
	TCCR0 |=((  (Config_Ptr->OC0_PinBehavior) & 0x01) <<COM00);
    181c:	a3 e5       	ldi	r26, 0x53	; 83
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e3 e5       	ldi	r30, 0x53	; 83
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	28 2f       	mov	r18, r24
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	83 81       	ldd	r24, Z+3	; 0x03
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	90 70       	andi	r25, 0x00	; 0
    1836:	82 95       	swap	r24
    1838:	92 95       	swap	r25
    183a:	90 7f       	andi	r25, 0xF0	; 240
    183c:	98 27       	eor	r25, r24
    183e:	80 7f       	andi	r24, 0xF0	; 240
    1840:	98 27       	eor	r25, r24
    1842:	82 2b       	or	r24, r18
    1844:	8c 93       	st	X, r24
	TCCR0 |=((( (Config_Ptr->OC0_PinBehavior) & 0x02) >>1) <<COM01);
    1846:	a3 e5       	ldi	r26, 0x53	; 83
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e3 e5       	ldi	r30, 0x53	; 83
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	83 81       	ldd	r24, Z+3	; 0x03
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	82 70       	andi	r24, 0x02	; 2
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	95 95       	asr	r25
    1862:	87 95       	ror	r24
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	82 95       	swap	r24
    186a:	92 95       	swap	r25
    186c:	90 7f       	andi	r25, 0xF0	; 240
    186e:	98 27       	eor	r25, r24
    1870:	80 7f       	andi	r24, 0xF0	; 240
    1872:	98 27       	eor	r25, r24
    1874:	82 2b       	or	r24, r18
    1876:	8c 93       	st	X, r24

	/*
	 * Initialize the pre-scaler value by using CS02 & CS01 & CS00  bits
	 */
	TCCR0 |= (((Config_Ptr->Timer0_prescaler & 0x04)>>2) <<CS02);
    1878:	a3 e5       	ldi	r26, 0x53	; 83
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e3 e5       	ldi	r30, 0x53	; 83
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	98 2f       	mov	r25, r24
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	84 81       	ldd	r24, Z+4	; 0x04
    188a:	84 70       	andi	r24, 0x04	; 4
    188c:	89 2b       	or	r24, r25
    188e:	8c 93       	st	X, r24
	TCCR0 |= (((Config_Ptr->Timer0_prescaler & 0x02)>>1) <<CS01);
    1890:	a3 e5       	ldi	r26, 0x53	; 83
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e3 e5       	ldi	r30, 0x53	; 83
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	98 2f       	mov	r25, r24
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	84 81       	ldd	r24, Z+4	; 0x04
    18a2:	82 70       	andi	r24, 0x02	; 2
    18a4:	89 2b       	or	r24, r25
    18a6:	8c 93       	st	X, r24
	TCCR0 |= ((Config_Ptr->Timer0_prescaler & 0x01) <<CS00);
    18a8:	a3 e5       	ldi	r26, 0x53	; 83
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e3 e5       	ldi	r30, 0x53	; 83
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	98 2f       	mov	r25, r24
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	84 81       	ldd	r24, Z+4	; 0x04
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	89 2b       	or	r24, r25
    18be:	8c 93       	st	X, r24

/*
 * Enable OR Disable Interrupt when  timer0 over flow occur
 */
	TIMSK |= (Config_Ptr->Over_Flow_Interrupt<<TOIE0);
    18c0:	a9 e5       	ldi	r26, 0x59	; 89
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e9 e5       	ldi	r30, 0x59	; 89
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	90 81       	ld	r25, Z
    18ca:	e9 81       	ldd	r30, Y+1	; 0x01
    18cc:	fa 81       	ldd	r31, Y+2	; 0x02
    18ce:	85 81       	ldd	r24, Z+5	; 0x05
    18d0:	89 2b       	or	r24, r25
    18d2:	8c 93       	st	X, r24

	/*
	 * ENable or disable Interrupt when timer0 compare match occur
	 */
	TIMSK |= (Config_Ptr->Compare_Match_Interrupt<<OCIE0);
    18d4:	a9 e5       	ldi	r26, 0x59	; 89
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e9 e5       	ldi	r30, 0x59	; 89
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	86 81       	ldd	r24, Z+6	; 0x06
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	82 2b       	or	r24, r18
    18f0:	8c 93       	st	X, r24
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <Timer0_setcallback>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setcallback(void(*a_ptr)(void))
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <Timer0_setcallback+0x6>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	90 93 6f 00 	sts	0x006F, r25
    1918:	80 93 6e 00 	sts	0x006E, r24
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Timer0_DeInit>:


void Timer0_DeInit(void)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * when CS02:CS00 =0 then timer is stopped
	 */
	TCCR0 = 0;
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	10 82       	st	Z, r1
	TCNT0=0;
    1934:	e2 e5       	ldi	r30, 0x52	; 82
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1
	OCR0=0;
    193a:	ec e5       	ldi	r30, 0x5C	; 92
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	10 82       	st	Z, r1
}
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1946:	1f 92       	push	r1
    1948:	0f 92       	push	r0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	0f 92       	push	r0
    194e:	11 24       	eor	r1, r1
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1970:	80 91 6e 00 	lds	r24, 0x006E
    1974:	90 91 6f 00 	lds	r25, 0x006F
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	29 f0       	breq	.+10     	; 0x1986 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    197c:	e0 91 6e 00 	lds	r30, 0x006E
    1980:	f0 91 6f 00 	lds	r31, 0x006F
    1984:	09 95       	icall
	}
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19d6:	80 91 6e 00 	lds	r24, 0x006E
    19da:	90 91 6f 00 	lds	r25, 0x006F
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	29 f0       	breq	.+10     	; 0x19ec <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19e2:	e0 91 6e 00 	lds	r30, 0x006E
    19e6:	f0 91 6f 00 	lds	r31, 0x006F
    19ea:	09 95       	icall
	}
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <buzzer_Init>:
/*
 * Description:
 * initialize the buzzer pin as output pin
 */
void buzzer_Init(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORT_NUM, PIN_NUM, PIN_OUTPUT);
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	62 e0       	ldi	r22, 0x02	; 2
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_setupPinDirection>
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <buzzer_on>:
/*
 * Description:
 * turn on the buzzer
 */
void buzzer_on(void)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	/*
	 * turn on the buzzer by making pin value Logic High=1
	 */
	GPIO_writePin(PORT_NUM, PIN_NUM, LOGIC_HIGH);
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	62 e0       	ldi	r22, 0x02	; 2
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <buzzer_off>:
/*
 * Description:
 * turn off the buzzer
 */
void buzzer_off(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	/*
	 * turn OFF the buzzer by making pin value Logic Low=0
	 */
	GPIO_writePin(PORT_NUM, PIN_NUM, LOGIC_LOW);
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_writePin>
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <EEPROM_writeByte>:
 * Description:
 * Function take address in EEPROM and byte
 * store this byte in the given address
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <EEPROM_writeByte+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <EEPROM_writeByte+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a6c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a70:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1a74:	88 30       	cpi	r24, 0x08	; 8
    1a76:	11 f0       	breq	.+4      	; 0x1a7c <EEPROM_writeByte+0x22>
        return ERROR;
    1a78:	1c 82       	std	Y+4, r1	; 0x04
    1a7a:	28 c0       	rjmp	.+80     	; 0x1acc <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	80 70       	andi	r24, 0x00	; 0
    1a82:	97 70       	andi	r25, 0x07	; 7
    1a84:	88 0f       	add	r24, r24
    1a86:	89 2f       	mov	r24, r25
    1a88:	88 1f       	adc	r24, r24
    1a8a:	99 0b       	sbc	r25, r25
    1a8c:	91 95       	neg	r25
    1a8e:	80 6a       	ori	r24, 0xA0	; 160
    1a90:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a94:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1a98:	88 31       	cpi	r24, 0x18	; 24
    1a9a:	11 f0       	breq	.+4      	; 0x1aa0 <EEPROM_writeByte+0x46>
        return ERROR; 
    1a9c:	1c 82       	std	Y+4, r1	; 0x04
    1a9e:	16 c0       	rjmp	.+44     	; 0x1acc <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1aa6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1aaa:	88 32       	cpi	r24, 0x28	; 40
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <EEPROM_writeByte+0x58>
        return ERROR;
    1aae:	1c 82       	std	Y+4, r1	; 0x04
    1ab0:	0d c0       	rjmp	.+26     	; 0x1acc <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ab8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1abc:	88 32       	cpi	r24, 0x28	; 40
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ac0:	1c 82       	std	Y+4, r1	; 0x04
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ac4:	0e 94 88 11 	call	0x2310	; 0x2310 <TWI_stop>
	
    return SUCCESS;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	8c 83       	std	Y+4, r24	; 0x04
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <EEPROM_readByte>:
 * Description:
 * Function take address in EEPROM and byte
 * Read this byte in the given address
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <EEPROM_readByte+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <EEPROM_readByte+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	7c 83       	std	Y+4, r23	; 0x04
    1af0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1af2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1af6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <EEPROM_readByte+0x26>
        return ERROR;
    1afe:	1d 82       	std	Y+5, r1	; 0x05
    1b00:	44 c0       	rjmp	.+136    	; 0x1b8a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	80 70       	andi	r24, 0x00	; 0
    1b08:	97 70       	andi	r25, 0x07	; 7
    1b0a:	88 0f       	add	r24, r24
    1b0c:	89 2f       	mov	r24, r25
    1b0e:	88 1f       	adc	r24, r24
    1b10:	99 0b       	sbc	r25, r25
    1b12:	91 95       	neg	r25
    1b14:	80 6a       	ori	r24, 0xA0	; 160
    1b16:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b1a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1b1e:	88 31       	cpi	r24, 0x18	; 24
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <EEPROM_readByte+0x4a>
        return ERROR;
    1b22:	1d 82       	std	Y+5, r1	; 0x05
    1b24:	32 c0       	rjmp	.+100    	; 0x1b8a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b2c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1b30:	88 32       	cpi	r24, 0x28	; 40
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <EEPROM_readByte+0x5c>
        return ERROR;
    1b34:	1d 82       	std	Y+5, r1	; 0x05
    1b36:	29 c0       	rjmp	.+82     	; 0x1b8a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1b38:	0e 94 78 11 	call	0x22f0	; 0x22f0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1b3c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1b40:	80 31       	cpi	r24, 0x10	; 16
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <EEPROM_readByte+0x6c>
        return ERROR;
    1b44:	1d 82       	std	Y+5, r1	; 0x05
    1b46:	21 c0       	rjmp	.+66     	; 0x1b8a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	80 70       	andi	r24, 0x00	; 0
    1b4e:	97 70       	andi	r25, 0x07	; 7
    1b50:	88 0f       	add	r24, r24
    1b52:	89 2f       	mov	r24, r25
    1b54:	88 1f       	adc	r24, r24
    1b56:	99 0b       	sbc	r25, r25
    1b58:	91 95       	neg	r25
    1b5a:	81 6a       	ori	r24, 0xA1	; 161
    1b5c:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b60:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1b64:	80 34       	cpi	r24, 0x40	; 64
    1b66:	11 f0       	breq	.+4      	; 0x1b6c <EEPROM_readByte+0x90>
        return ERROR;
    1b68:	1d 82       	std	Y+5, r1	; 0x05
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1b6c:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_readByteWithNACK>
    1b70:	eb 81       	ldd	r30, Y+3	; 0x03
    1b72:	fc 81       	ldd	r31, Y+4	; 0x04
    1b74:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b76:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TWI_getStatus>
    1b7a:	88 35       	cpi	r24, 0x58	; 88
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <EEPROM_readByte+0xa6>
        return ERROR;
    1b7e:	1d 82       	std	Y+5, r1	; 0x05
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b82:	0e 94 88 11 	call	0x2310	; 0x2310 <TWI_stop>

    return SUCCESS;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <GPIO_setupPinDirection+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_setupPinDirection+0x8>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	6a 83       	std	Y+2, r22	; 0x02
    1bae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <GPIO_setupPinDirection+0x1c>
    1bb6:	d5 c0       	rjmp	.+426    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <GPIO_setupPinDirection+0x24>
    1bbe:	d1 c0       	rjmp	.+418    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3d 83       	std	Y+5, r19	; 0x05
    1bc8:	2c 83       	std	Y+4, r18	; 0x04
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <GPIO_setupPinDirection+0x3a>
    1bd4:	43 c0       	rjmp	.+134    	; 0x1c5c <GPIO_setupPinDirection+0xc0>
    1bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	2c f4       	brge	.+10     	; 0x1bea <GPIO_setupPinDirection+0x4e>
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	71 f0       	breq	.+28     	; 0x1c04 <GPIO_setupPinDirection+0x68>
    1be8:	bc c0       	rjmp	.+376    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <GPIO_setupPinDirection+0x5a>
    1bf4:	5f c0       	rjmp	.+190    	; 0x1cb4 <GPIO_setupPinDirection+0x118>
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	83 30       	cpi	r24, 0x03	; 3
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <GPIO_setupPinDirection+0x66>
    1c00:	85 c0       	rjmp	.+266    	; 0x1d0c <GPIO_setupPinDirection+0x170>
    1c02:	af c0       	rjmp	.+350    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	a1 f4       	brne	.+40     	; 0x1c32 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c0a:	aa e3       	ldi	r26, 0x3A	; 58
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ea e3       	ldi	r30, 0x3A	; 58
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <GPIO_setupPinDirection+0x8c>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <GPIO_setupPinDirection+0x88>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	98 c0       	rjmp	.+304    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c32:	aa e3       	ldi	r26, 0x3A	; 58
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ea e3       	ldi	r30, 0x3A	; 58
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_setupPinDirection+0xb4>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_setupPinDirection+0xb0>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	83 c0       	rjmp	.+262    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	a1 f4       	brne	.+40     	; 0x1c8a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c62:	a7 e3       	ldi	r26, 0x37	; 55
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e7 e3       	ldi	r30, 0x37	; 55
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_setupPinDirection+0xe4>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_setupPinDirection+0xe0>
    1c84:	84 2b       	or	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	6c c0       	rjmp	.+216    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c8a:	a7 e3       	ldi	r26, 0x37	; 55
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e7 e3       	ldi	r30, 0x37	; 55
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <GPIO_setupPinDirection+0x10c>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <GPIO_setupPinDirection+0x108>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	57 c0       	rjmp	.+174    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cba:	a4 e3       	ldi	r26, 0x34	; 52
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e4 e3       	ldi	r30, 0x34	; 52
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <GPIO_setupPinDirection+0x13c>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <GPIO_setupPinDirection+0x138>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	40 c0       	rjmp	.+128    	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ce2:	a4 e3       	ldi	r26, 0x34	; 52
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e4 e3       	ldi	r30, 0x34	; 52
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <GPIO_setupPinDirection+0x164>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <GPIO_setupPinDirection+0x160>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	2b c0       	rjmp	.+86     	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	a1 f4       	brne	.+40     	; 0x1d3a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d12:	a1 e3       	ldi	r26, 0x31	; 49
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e1 e3       	ldi	r30, 0x31	; 49
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 2e       	mov	r0, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <GPIO_setupPinDirection+0x194>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <GPIO_setupPinDirection+0x190>
    1d34:	84 2b       	or	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d3a:	a1 e3       	ldi	r26, 0x31	; 49
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e1 e3       	ldi	r30, 0x31	; 49
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 2e       	mov	r0, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <GPIO_setupPinDirection+0x1bc>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <GPIO_setupPinDirection+0x1b8>
    1d5c:	80 95       	com	r24
    1d5e:	84 23       	and	r24, r20
    1d60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <GPIO_writePin+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <GPIO_writePin+0x8>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	6a 83       	std	Y+2, r22	; 0x02
    1d84:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 30       	cpi	r24, 0x08	; 8
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <GPIO_writePin+0x1c>
    1d8c:	d5 c0       	rjmp	.+426    	; 0x1f38 <GPIO_writePin+0x1c6>
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <GPIO_writePin+0x24>
    1d94:	d1 c0       	rjmp	.+418    	; 0x1f38 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3d 83       	std	Y+5, r19	; 0x05
    1d9e:	2c 83       	std	Y+4, r18	; 0x04
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <GPIO_writePin+0x3a>
    1daa:	43 c0       	rjmp	.+134    	; 0x1e32 <GPIO_writePin+0xc0>
    1dac:	2c 81       	ldd	r18, Y+4	; 0x04
    1dae:	3d 81       	ldd	r19, Y+5	; 0x05
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <GPIO_writePin+0x4e>
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	71 f0       	breq	.+28     	; 0x1dda <GPIO_writePin+0x68>
    1dbe:	bc c0       	rjmp	.+376    	; 0x1f38 <GPIO_writePin+0x1c6>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <GPIO_writePin+0x5a>
    1dca:	5f c0       	rjmp	.+190    	; 0x1e8a <GPIO_writePin+0x118>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <GPIO_writePin+0x66>
    1dd6:	85 c0       	rjmp	.+266    	; 0x1ee2 <GPIO_writePin+0x170>
    1dd8:	af c0       	rjmp	.+350    	; 0x1f38 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	a1 f4       	brne	.+40     	; 0x1e08 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1de0:	ab e3       	ldi	r26, 0x3B	; 59
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	eb e3       	ldi	r30, 0x3B	; 59
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_writePin+0x8c>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_writePin+0x88>
    1e02:	84 2b       	or	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	98 c0       	rjmp	.+304    	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e08:	ab e3       	ldi	r26, 0x3B	; 59
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	eb e3       	ldi	r30, 0x3B	; 59
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <GPIO_writePin+0xb4>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <GPIO_writePin+0xb0>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	83 c0       	rjmp	.+262    	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	a1 f4       	brne	.+40     	; 0x1e60 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e38:	a8 e3       	ldi	r26, 0x38	; 56
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e8 e3       	ldi	r30, 0x38	; 56
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <GPIO_writePin+0xe4>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <GPIO_writePin+0xe0>
    1e5a:	84 2b       	or	r24, r20
    1e5c:	8c 93       	st	X, r24
    1e5e:	6c c0       	rjmp	.+216    	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e60:	a8 e3       	ldi	r26, 0x38	; 56
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e8 e3       	ldi	r30, 0x38	; 56
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	48 2f       	mov	r20, r24
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 2e       	mov	r0, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <GPIO_writePin+0x10c>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <GPIO_writePin+0x108>
    1e82:	80 95       	com	r24
    1e84:	84 23       	and	r24, r20
    1e86:	8c 93       	st	X, r24
    1e88:	57 c0       	rjmp	.+174    	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	a1 f4       	brne	.+40     	; 0x1eb8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e90:	a5 e3       	ldi	r26, 0x35	; 53
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e3       	ldi	r30, 0x35	; 53
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <GPIO_writePin+0x13c>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <GPIO_writePin+0x138>
    1eb2:	84 2b       	or	r24, r20
    1eb4:	8c 93       	st	X, r24
    1eb6:	40 c0       	rjmp	.+128    	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1eb8:	a5 e3       	ldi	r26, 0x35	; 53
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e3       	ldi	r30, 0x35	; 53
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <GPIO_writePin+0x164>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <GPIO_writePin+0x160>
    1eda:	80 95       	com	r24
    1edc:	84 23       	and	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	2b c0       	rjmp	.+86     	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	a1 f4       	brne	.+40     	; 0x1f10 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ee8:	a2 e3       	ldi	r26, 0x32	; 50
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e2 e3       	ldi	r30, 0x32	; 50
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_writePin+0x194>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_writePin+0x190>
    1f0a:	84 2b       	or	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f10:	a2 e3       	ldi	r26, 0x32	; 50
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e2 e3       	ldi	r30, 0x32	; 50
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <GPIO_writePin+0x1bc>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <GPIO_writePin+0x1b8>
    1f32:	80 95       	com	r24
    1f34:	84 23       	and	r24, r20
    1f36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <GPIO_readPin+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <GPIO_readPin+0x8>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	88 30       	cpi	r24, 0x08	; 8
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <GPIO_readPin+0x1c>
    1f62:	84 c0       	rjmp	.+264    	; 0x206c <GPIO_readPin+0x124>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <GPIO_readPin+0x24>
    1f6a:	80 c0       	rjmp	.+256    	; 0x206c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	3d 83       	std	Y+5, r19	; 0x05
    1f74:	2c 83       	std	Y+4, r18	; 0x04
    1f76:	4c 81       	ldd	r20, Y+4	; 0x04
    1f78:	5d 81       	ldd	r21, Y+5	; 0x05
    1f7a:	41 30       	cpi	r20, 0x01	; 1
    1f7c:	51 05       	cpc	r21, r1
    1f7e:	79 f1       	breq	.+94     	; 0x1fde <GPIO_readPin+0x96>
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	82 30       	cpi	r24, 0x02	; 2
    1f86:	91 05       	cpc	r25, r1
    1f88:	34 f4       	brge	.+12     	; 0x1f96 <GPIO_readPin+0x4e>
    1f8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8e:	21 15       	cp	r18, r1
    1f90:	31 05       	cpc	r19, r1
    1f92:	69 f0       	breq	.+26     	; 0x1fae <GPIO_readPin+0x66>
    1f94:	6b c0       	rjmp	.+214    	; 0x206c <GPIO_readPin+0x124>
    1f96:	4c 81       	ldd	r20, Y+4	; 0x04
    1f98:	5d 81       	ldd	r21, Y+5	; 0x05
    1f9a:	42 30       	cpi	r20, 0x02	; 2
    1f9c:	51 05       	cpc	r21, r1
    1f9e:	b9 f1       	breq	.+110    	; 0x200e <GPIO_readPin+0xc6>
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa4:	83 30       	cpi	r24, 0x03	; 3
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <GPIO_readPin+0x64>
    1faa:	49 c0       	rjmp	.+146    	; 0x203e <GPIO_readPin+0xf6>
    1fac:	5f c0       	rjmp	.+190    	; 0x206c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fae:	e9 e3       	ldi	r30, 0x39	; 57
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a9 01       	movw	r20, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <GPIO_readPin+0x7e>
    1fc2:	55 95       	asr	r21
    1fc4:	47 95       	ror	r20
    1fc6:	8a 95       	dec	r24
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <GPIO_readPin+0x7a>
    1fca:	ca 01       	movw	r24, r20
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	90 70       	andi	r25, 0x00	; 0
    1fd0:	88 23       	and	r24, r24
    1fd2:	19 f0       	breq	.+6      	; 0x1fda <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	49 c0       	rjmp	.+146    	; 0x206c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fda:	19 82       	std	Y+1, r1	; 0x01
    1fdc:	47 c0       	rjmp	.+142    	; 0x206c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1fde:	e6 e3       	ldi	r30, 0x36	; 54
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a9 01       	movw	r20, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <GPIO_readPin+0xae>
    1ff2:	55 95       	asr	r21
    1ff4:	47 95       	ror	r20
    1ff6:	8a 95       	dec	r24
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <GPIO_readPin+0xaa>
    1ffa:	ca 01       	movw	r24, r20
    1ffc:	81 70       	andi	r24, 0x01	; 1
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	88 23       	and	r24, r24
    2002:	19 f0       	breq	.+6      	; 0x200a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	31 c0       	rjmp	.+98     	; 0x206c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    200a:	19 82       	std	Y+1, r1	; 0x01
    200c:	2f c0       	rjmp	.+94     	; 0x206c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    200e:	e3 e3       	ldi	r30, 0x33	; 51
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a9 01       	movw	r20, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <GPIO_readPin+0xde>
    2022:	55 95       	asr	r21
    2024:	47 95       	ror	r20
    2026:	8a 95       	dec	r24
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <GPIO_readPin+0xda>
    202a:	ca 01       	movw	r24, r20
    202c:	81 70       	andi	r24, 0x01	; 1
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	88 23       	and	r24, r24
    2032:	19 f0       	breq	.+6      	; 0x203a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	19 c0       	rjmp	.+50     	; 0x206c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    203a:	19 82       	std	Y+1, r1	; 0x01
    203c:	17 c0       	rjmp	.+46     	; 0x206c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    203e:	e0 e3       	ldi	r30, 0x30	; 48
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a9 01       	movw	r20, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <GPIO_readPin+0x10e>
    2052:	55 95       	asr	r21
    2054:	47 95       	ror	r20
    2056:	8a 95       	dec	r24
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <GPIO_readPin+0x10a>
    205a:	ca 01       	movw	r24, r20
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	88 23       	and	r24, r24
    2062:	19 f0       	breq	.+6      	; 0x206a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	01 c0       	rjmp	.+2      	; 0x206c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    206a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <GPIO_setupPortDirection+0x6>
    2084:	00 d0       	rcall	.+0      	; 0x2086 <GPIO_setupPortDirection+0x8>
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	84 30       	cpi	r24, 0x04	; 4
    2092:	90 f5       	brcc	.+100    	; 0x20f8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	3c 83       	std	Y+4, r19	; 0x04
    209c:	2b 83       	std	Y+3, r18	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	d1 f0       	breq	.+52     	; 0x20dc <GPIO_setupPortDirection+0x5e>
    20a8:	2b 81       	ldd	r18, Y+3	; 0x03
    20aa:	3c 81       	ldd	r19, Y+4	; 0x04
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	2c f4       	brge	.+10     	; 0x20bc <GPIO_setupPortDirection+0x3e>
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <GPIO_setupPortDirection+0x54>
    20ba:	1e c0       	rjmp	.+60     	; 0x20f8 <GPIO_setupPortDirection+0x7a>
    20bc:	2b 81       	ldd	r18, Y+3	; 0x03
    20be:	3c 81       	ldd	r19, Y+4	; 0x04
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	81 f0       	breq	.+32     	; 0x20e6 <GPIO_setupPortDirection+0x68>
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <GPIO_setupPortDirection+0x72>
    20d0:	13 c0       	rjmp	.+38     	; 0x20f8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20d2:	ea e3       	ldi	r30, 0x3A	; 58
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	80 83       	st	Z, r24
    20da:	0e c0       	rjmp	.+28     	; 0x20f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20dc:	e7 e3       	ldi	r30, 0x37	; 55
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	80 83       	st	Z, r24
    20e4:	09 c0       	rjmp	.+18     	; 0x20f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20e6:	e4 e3       	ldi	r30, 0x34	; 52
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	80 83       	st	Z, r24
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20f0:	e1 e3       	ldi	r30, 0x31	; 49
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <GPIO_writePort+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <GPIO_writePort+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	90 f5       	brcc	.+100    	; 0x2180 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	3c 83       	std	Y+4, r19	; 0x04
    2124:	2b 83       	std	Y+3, r18	; 0x03
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	d1 f0       	breq	.+52     	; 0x2164 <GPIO_writePort+0x5e>
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	3c 81       	ldd	r19, Y+4	; 0x04
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	2c f4       	brge	.+10     	; 0x2144 <GPIO_writePort+0x3e>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	61 f0       	breq	.+24     	; 0x215a <GPIO_writePort+0x54>
    2142:	1e c0       	rjmp	.+60     	; 0x2180 <GPIO_writePort+0x7a>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	81 f0       	breq	.+32     	; 0x216e <GPIO_writePort+0x68>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	91 05       	cpc	r25, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <GPIO_writePort+0x72>
    2158:	13 c0       	rjmp	.+38     	; 0x2180 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    215a:	eb e3       	ldi	r30, 0x3B	; 59
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	80 83       	st	Z, r24
    2162:	0e c0       	rjmp	.+28     	; 0x2180 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2164:	e8 e3       	ldi	r30, 0x38	; 56
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	80 83       	st	Z, r24
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    216e:	e5 e3       	ldi	r30, 0x35	; 53
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	80 83       	st	Z, r24
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2178:	e2 e3       	ldi	r30, 0x32	; 50
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <GPIO_readPort+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <GPIO_readPort+0x8>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    219c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	90 f5       	brcc	.+100    	; 0x2208 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3c 83       	std	Y+4, r19	; 0x04
    21ac:	2b 83       	std	Y+3, r18	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <GPIO_readPort+0x5e>
    21b8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ba:	3c 81       	ldd	r19, Y+4	; 0x04
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <GPIO_readPort+0x3e>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <GPIO_readPort+0x54>
    21ca:	1e c0       	rjmp	.+60     	; 0x2208 <GPIO_readPort+0x7a>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <GPIO_readPort+0x68>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <GPIO_readPort+0x72>
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21e2:	e9 e3       	ldi	r30, 0x39	; 57
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	0e c0       	rjmp	.+28     	; 0x2208 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    21ec:	e6 e3       	ldi	r30, 0x36	; 54
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    21f6:	e3 e3       	ldi	r30, 0x33	; 51
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2200:	e0 e3       	ldi	r30, 0x30	; 48
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
}
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <TWI_init>:
 * Initialize the TWI device
 * Give the device an address.
 * Enable TWI
 */
void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <TWI_init+0x12>
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01

	g_prescaler=Config_Ptr->prescaler;
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	80 81       	ld	r24, Z
    2238:	80 93 7e 00 	sts	0x007E, r24

	/*
	 * TWPS: TWI prescaler Bits
	 */
	TWSR=(Config_Ptr->prescaler);
    223c:	a1 e2       	ldi	r26, 0x21	; 33
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e9 81       	ldd	r30, Y+1	; 0x01
    2242:	fa 81       	ldd	r31, Y+2	; 0x02
    2244:	80 81       	ld	r24, Z
    2246:	8c 93       	st	X, r24
	 * TWBR register used in generating SCL frequency while  operating in master mode
	 * SCL frequency = CPU Frequency/(16+(2 * TWBR * (4 power TWPS) ) )
	 * SCL frequency = Chosen BitRate
	 * the equation is used to get TWBR Register Value
	 */
	TWBR=( (F_CPU/(Config_Ptr->bitRate)) -16)/(2 * Calculate_power() );
    2248:	cc 24       	eor	r12, r12
    224a:	dd 24       	eor	r13, r13
    224c:	68 94       	set
    224e:	c5 f8       	bld	r12, 5
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	21 81       	ldd	r18, Z+1	; 0x01
    2256:	32 81       	ldd	r19, Z+2	; 0x02
    2258:	43 81       	ldd	r20, Z+3	; 0x03
    225a:	54 81       	ldd	r21, Z+4	; 0x04
    225c:	80 e4       	ldi	r24, 0x40	; 64
    225e:	92 e4       	ldi	r25, 0x42	; 66
    2260:	af e0       	ldi	r26, 0x0F	; 15
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__udivmodsi4>
    226c:	da 01       	movw	r26, r20
    226e:	c9 01       	movw	r24, r18
    2270:	0f 2e       	mov	r0, r31
    2272:	f0 ef       	ldi	r31, 0xF0	; 240
    2274:	ef 2e       	mov	r14, r31
    2276:	ff ef       	ldi	r31, 0xFF	; 255
    2278:	ff 2e       	mov	r15, r31
    227a:	ff ef       	ldi	r31, 0xFF	; 255
    227c:	0f 2f       	mov	r16, r31
    227e:	ff ef       	ldi	r31, 0xFF	; 255
    2280:	1f 2f       	mov	r17, r31
    2282:	f0 2d       	mov	r31, r0
    2284:	e8 0e       	add	r14, r24
    2286:	f9 1e       	adc	r15, r25
    2288:	0a 1f       	adc	r16, r26
    228a:	1b 1f       	adc	r17, r27
    228c:	0e 94 df 11 	call	0x23be	; 0x23be <Calculate_power>
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	9c 01       	movw	r18, r24
    229a:	44 27       	eor	r20, r20
    229c:	37 fd       	sbrc	r19, 7
    229e:	40 95       	com	r20
    22a0:	54 2f       	mov	r21, r20
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__udivmodsi4>
    22aa:	da 01       	movw	r26, r20
    22ac:	c9 01       	movw	r24, r18
    22ae:	f6 01       	movw	r30, r12
    22b0:	80 83       	st	Z, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = 0b00000010; // my address = 0x01 :)
    22b2:	e2 e2       	ldi	r30, 0x22	; 34
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	80 83       	st	Z, r24

	TWCR=(1<<TWCR); /* enable TWI */
    22ba:	a6 e5       	ldi	r26, 0x56	; 86
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e6 e5       	ldi	r30, 0x56	; 86
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	02 2e       	mov	r0, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <TWI_init+0xbc>
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	0a 94       	dec	r0
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <TWI_init+0xb8>
    22d8:	8c 93       	st	X, r24
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	08 95       	ret

000022f0 <TWI_start>:
/*
 * Description:
 * send the start bit
 */
void TWI_start(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) |(1<<TWSTA) |(1<<TWEN);
    22f8:	e6 e5       	ldi	r30, 0x56	; 86
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	84 ea       	ldi	r24, 0xA4	; 164
    22fe:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2300:	e6 e5       	ldi	r30, 0x56	; 86
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	dc f7       	brge	.-10     	; 0x2300 <TWI_start+0x10>
}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <TWI_stop>:
/*
 * Description:
 * send the stop bit
 */
void TWI_stop(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2318:	e6 e5       	ldi	r30, 0x56	; 86
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	84 e9       	ldi	r24, 0x94	; 148
    231e:	80 83       	st	Z, r24
}
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <TWI_writeByte>:
/*
 * Description:
 * to send byte
 */
void TWI_writeByte(uint8 data)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2332:	e3 e2       	ldi	r30, 0x23	; 35
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    233a:	e6 e5       	ldi	r30, 0x56	; 86
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	84 e8       	ldi	r24, 0x84	; 132
    2340:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2342:	e6 e5       	ldi	r30, 0x56	; 86
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 23       	and	r24, r24
    234a:	dc f7       	brge	.-10     	; 0x2342 <TWI_writeByte+0x1c>
}
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <TWI_readByteWithACK>:
/*
 * Description:
 * to receive byte with ACK
 */
uint8 TWI_readByteWithACK(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    235c:	e6 e5       	ldi	r30, 0x56	; 86
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	84 ec       	ldi	r24, 0xC4	; 196
    2362:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2364:	e6 e5       	ldi	r30, 0x56	; 86
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	dc f7       	brge	.-10     	; 0x2364 <TWI_readByteWithACK+0x10>

	/* Read Data */
	return TWDR;
    236e:	e3 e2       	ldi	r30, 0x23	; 35
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <TWI_readByteWithNACK>:
/*
 * Description:
 * to receive byte with negative ACK
 */
uint8 TWI_readByteWithNACK(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2382:	e6 e5       	ldi	r30, 0x56	; 86
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	84 e8       	ldi	r24, 0x84	; 132
    2388:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    238a:	e6 e5       	ldi	r30, 0x56	; 86
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	dc f7       	brge	.-10     	; 0x238a <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    2394:	e3 e2       	ldi	r30, 0x23	; 35
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <TWI_getStatus>:
/*
 * Description:
 * To get TWI status
 */
uint8 TWI_getStatus(void)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    23aa:	e1 e2       	ldi	r30, 0x21	; 33
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	88 7f       	andi	r24, 0xF8	; 248
    23b2:	89 83       	std	Y+1, r24	; 0x01
	return status;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <Calculate_power>:
 * Description:
 * Calculate the power in the SCL frequency equation "4 power TWPS value"
 * to know the value to put in  TWBR register
 */
uint8 Calculate_power(void)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <Calculate_power+0x6>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62

	uint8 power_value=1,i;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0; i<g_prescaler ;i++)
    23cc:	19 82       	std	Y+1, r1	; 0x01
    23ce:	0b c0       	rjmp	.+22     	; 0x23e6 <Calculate_power+0x28>
	{
		power_value=power_value * 4;
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8 Calculate_power(void)
{

	uint8 power_value=1,i;
	for(i=0; i<g_prescaler ;i++)
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	90 91 7e 00 	lds	r25, 0x007E
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	89 17       	cp	r24, r25
    23ee:	80 f3       	brcs	.-32     	; 0x23d0 <Calculate_power+0x12>
	{
		power_value=power_value * 4;
	}
	return power_value;
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const usart_ConfigType * Config_Ptr,uint32 baud_rate)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	28 97       	sbiw	r28, 0x08	; 8
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
    2414:	4d 83       	std	Y+5, r20	; 0x05
    2416:	5e 83       	std	Y+6, r21	; 0x06
    2418:	6f 83       	std	Y+7, r22	; 0x07
    241a:	78 87       	std	Y+8, r23	; 0x08
	uint16 ubrr_value = 0;
    241c:	1a 82       	std	Y+2, r1	; 0x02
    241e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X =0 Normal Speed OR =1 double transmission speed */
	UCSRA = (Config_Ptr->speed<<U2X);
    2420:	ab e2       	ldi	r26, 0x2B	; 43
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	eb 81       	ldd	r30, Y+3	; 0x03
    2426:	fc 81       	ldd	r31, Y+4	; 0x04
    2428:	80 81       	ld	r24, Z
    242a:	88 0f       	add	r24, r24
    242c:	8c 93       	st	X, r24
	 * UDRIE   	 Disable OR Enable USART Data Register Empty Interrupt
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  	 For 8-bit data mode
	 ***********************************************************************/
	UCSRB  = (Config_Ptr->receiveInterrupt<<RXCIE) ;
    242e:	aa e2       	ldi	r26, 0x2A	; 42
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	eb 81       	ldd	r30, Y+3	; 0x03
    2434:	fc 81       	ldd	r31, Y+4	; 0x04
    2436:	81 81       	ldd	r24, Z+1	; 0x01
    2438:	87 95       	ror	r24
    243a:	88 27       	eor	r24, r24
    243c:	87 95       	ror	r24
    243e:	8c 93       	st	X, r24
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2440:	aa e2       	ldi	r26, 0x2A	; 42
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ea e2       	ldi	r30, 0x2A	; 42
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	88 61       	ori	r24, 0x18	; 24
    244c:	8c 93       	st	X, r24
	UCSRB |= (((Config_Ptr->CharacterSize & 0x04) >>2) <<UCSZ2);
    244e:	aa e2       	ldi	r26, 0x2A	; 42
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ea e2       	ldi	r30, 0x2A	; 42
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	98 2f       	mov	r25, r24
    245a:	eb 81       	ldd	r30, Y+3	; 0x03
    245c:	fc 81       	ldd	r31, Y+4	; 0x04
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	84 70       	andi	r24, 0x04	; 4
    2462:	89 2b       	or	r24, r25
    2464:	8c 93       	st	X, r24
	 * UPM1:0   parity bit
	 * USBS    = 0 One stop bit OR =1 Two stop bit
	 * UCSZ1:0  For data mode
	 * UCPOL    Used with the Synchronous operation only =0
	 ***********************************************************************/
	UCSRC  = (1<<URSEL) |(Config_Ptr->modeSelect<<UMSEL);
    2466:	a0 e4       	ldi	r26, 0x40	; 64
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	eb 81       	ldd	r30, Y+3	; 0x03
    246c:	fc 81       	ldd	r31, Y+4	; 0x04
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	00 24       	eor	r0, r0
    2476:	96 95       	lsr	r25
    2478:	87 95       	ror	r24
    247a:	07 94       	ror	r0
    247c:	96 95       	lsr	r25
    247e:	87 95       	ror	r24
    2480:	07 94       	ror	r0
    2482:	98 2f       	mov	r25, r24
    2484:	80 2d       	mov	r24, r0
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	8c 93       	st	X, r24

	/*
	 * Masking to get the value of UPM0 bit from 2 bit number
	 * Masking to get the value of UPM1 bit from 2 bit number
	 */
	UCSRC |= ((Config_Ptr->ParityMode &0x01)<<UPM0) |(((Config_Ptr->ParityMode &0x02)>>1) <<UPM1);
    248a:	a0 e4       	ldi	r26, 0x40	; 64
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e0 e4       	ldi	r30, 0x40	; 64
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	38 2f       	mov	r19, r24
    2496:	eb 81       	ldd	r30, Y+3	; 0x03
    2498:	fc 81       	ldd	r31, Y+4	; 0x04
    249a:	85 81       	ldd	r24, Z+5	; 0x05
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	81 70       	andi	r24, 0x01	; 1
    24a2:	90 70       	andi	r25, 0x00	; 0
    24a4:	82 95       	swap	r24
    24a6:	92 95       	swap	r25
    24a8:	90 7f       	andi	r25, 0xF0	; 240
    24aa:	98 27       	eor	r25, r24
    24ac:	80 7f       	andi	r24, 0xF0	; 240
    24ae:	98 27       	eor	r25, r24
    24b0:	28 2f       	mov	r18, r24
    24b2:	eb 81       	ldd	r30, Y+3	; 0x03
    24b4:	fc 81       	ldd	r31, Y+4	; 0x04
    24b6:	85 81       	ldd	r24, Z+5	; 0x05
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	82 70       	andi	r24, 0x02	; 2
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	95 95       	asr	r25
    24c2:	87 95       	ror	r24
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	82 95       	swap	r24
    24ca:	92 95       	swap	r25
    24cc:	90 7f       	andi	r25, 0xF0	; 240
    24ce:	98 27       	eor	r25, r24
    24d0:	80 7f       	andi	r24, 0xF0	; 240
    24d2:	98 27       	eor	r25, r24
    24d4:	82 2b       	or	r24, r18
    24d6:	83 2b       	or	r24, r19
    24d8:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->stopBitSelect<<USBS);
    24da:	a0 e4       	ldi	r26, 0x40	; 64
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e0 e4       	ldi	r30, 0x40	; 64
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	28 2f       	mov	r18, r24
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	86 81       	ldd	r24, Z+6	; 0x06
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	82 2b       	or	r24, r18
    24fe:	8c 93       	st	X, r24
	/*
	 * Masking to take the first bit in CharacterSize and write it in UCSZ0
	 * Masking to take the Second bit in CharacterSize and write it in UCSZ1
	 * To Configure the number of bit you want to send or receive
	 */
	UCSRC |= ((Config_Ptr->CharacterSize & 0x01)<<UCSZ0) | (((Config_Ptr->CharacterSize & 0x02)>>1) <<UCSZ1);
    2500:	a0 e4       	ldi	r26, 0x40	; 64
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e0 e4       	ldi	r30, 0x40	; 64
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	38 2f       	mov	r19, r24
    250c:	eb 81       	ldd	r30, Y+3	; 0x03
    250e:	fc 81       	ldd	r31, Y+4	; 0x04
    2510:	83 81       	ldd	r24, Z+3	; 0x03
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	81 70       	andi	r24, 0x01	; 1
    2518:	90 70       	andi	r25, 0x00	; 0
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	28 2f       	mov	r18, r24
    2520:	eb 81       	ldd	r30, Y+3	; 0x03
    2522:	fc 81       	ldd	r31, Y+4	; 0x04
    2524:	83 81       	ldd	r24, Z+3	; 0x03
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	82 70       	andi	r24, 0x02	; 2
    252c:	90 70       	andi	r25, 0x00	; 0
    252e:	95 95       	asr	r25
    2530:	87 95       	ror	r24
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	82 2b       	or	r24, r18
    253c:	83 2b       	or	r24, r19
    253e:	8c 93       	st	X, r24
	UCSRC |=  (Config_Ptr->Edge <<UCPOL);
    2540:	a0 e4       	ldi	r26, 0x40	; 64
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e0 e4       	ldi	r30, 0x40	; 64
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	90 81       	ld	r25, Z
    254a:	eb 81       	ldd	r30, Y+3	; 0x03
    254c:	fc 81       	ldd	r31, Y+4	; 0x04
    254e:	87 81       	ldd	r24, Z+7	; 0x07
    2550:	89 2b       	or	r24, r25
    2552:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	af 81       	ldd	r26, Y+7	; 0x07
    255a:	b8 85       	ldd	r27, Y+8	; 0x08
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	aa 1f       	adc	r26, r26
    2562:	bb 1f       	adc	r27, r27
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	aa 1f       	adc	r26, r26
    256a:	bb 1f       	adc	r27, r27
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	aa 1f       	adc	r26, r26
    2572:	bb 1f       	adc	r27, r27
    2574:	9c 01       	movw	r18, r24
    2576:	ad 01       	movw	r20, r26
    2578:	80 e4       	ldi	r24, 0x40	; 64
    257a:	92 e4       	ldi	r25, 0x42	; 66
    257c:	af e0       	ldi	r26, 0x0F	; 15
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__udivmodsi4>
    2588:	da 01       	movw	r26, r20
    258a:	c9 01       	movw	r24, r18
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2592:	e0 e4       	ldi	r30, 0x40	; 64
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	89 2f       	mov	r24, r25
    259c:	99 27       	eor	r25, r25
    259e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    25a0:	e9 e2       	ldi	r30, 0x29	; 41
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	80 83       	st	Z, r24
}
    25a8:	28 96       	adiw	r28, 0x08	; 8
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    25c6:	eb e2       	ldi	r30, 0x2B	; 43
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	80 72       	andi	r24, 0x20	; 32
    25d2:	90 70       	andi	r25, 0x00	; 0
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	b9 f3       	breq	.-18     	; 0x25c6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    25d8:	ec e2       	ldi	r30, 0x2C	; 44
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	80 83       	st	Z, r24
}
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    25f0:	eb e2       	ldi	r30, 0x2B	; 43
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	dc f7       	brge	.-10     	; 0x25f0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    25fa:	ec e2       	ldi	r30, 0x2C	; 44
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
}
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <UART_sendString+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	9b 83       	std	Y+3, r25	; 0x03
    2614:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2616:	19 82       	std	Y+1, r1	; 0x01
    2618:	0e c0       	rjmp	.+28     	; 0x2636 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	fc 01       	movw	r30, r24
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	80 81       	ld	r24, Z
    262c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <UART_sendByte>
		i++;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	9b 81       	ldd	r25, Y+3	; 0x03
    2640:	fc 01       	movw	r30, r24
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	80 81       	ld	r24, Z
    2648:	88 23       	and	r24, r24
    264a:	39 f7       	brne	.-50     	; 0x261a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <UART_receiveString+0xa>
    2662:	0f 92       	push	r0
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	9b 83       	std	Y+3, r25	; 0x03
    266a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    266c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	9b 81       	ldd	r25, Y+3	; 0x03
    2678:	8c 01       	movw	r16, r24
    267a:	02 0f       	add	r16, r18
    267c:	13 1f       	adc	r17, r19
    267e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <UART_recieveByte>
    2682:	f8 01       	movw	r30, r16
    2684:	80 83       	st	Z, r24
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	9b 81       	ldd	r25, Y+3	; 0x03
    2698:	8c 01       	movw	r16, r24
    269a:	02 0f       	add	r16, r18
    269c:	13 1f       	adc	r17, r19
    269e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <UART_recieveByte>
    26a2:	f8 01       	movw	r30, r16
    26a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	fc 01       	movw	r30, r24
    26b2:	e2 0f       	add	r30, r18
    26b4:	f3 1f       	adc	r31, r19
    26b6:	80 81       	ld	r24, Z
    26b8:	83 32       	cpi	r24, 0x23	; 35
    26ba:	31 f7       	brne	.-52     	; 0x2688 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	9b 81       	ldd	r25, Y+3	; 0x03
    26c6:	fc 01       	movw	r30, r24
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	10 82       	st	Z, r1
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <__vector_11>:

/*********************************************************************************
 * 								ISR's Code		    							 *
 *********************************************************************************/
ISR(USART_RXC_vect)
{
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	2f 93       	push	r18
    26ea:	3f 93       	push	r19
    26ec:	4f 93       	push	r20
    26ee:	5f 93       	push	r21
    26f0:	6f 93       	push	r22
    26f2:	7f 93       	push	r23
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	af 93       	push	r26
    26fa:	bf 93       	push	r27
    26fc:	ef 93       	push	r30
    26fe:	ff 93       	push	r31
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	g_recieved_message = UART_recieveByte();
    2708:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <UART_recieveByte>
    270c:	80 93 7d 00 	sts	0x007D, r24
	if (g_recieved_message == NEW_PASSWORD) {
    2710:	80 91 7d 00 	lds	r24, 0x007D
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	29 f4       	brne	.+10     	; 0x2722 <__vector_11+0x44>

		UART_receiveString(g_Pass_recieved);
    2718:	81 e7       	ldi	r24, 0x71	; 113
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 2c 13 	call	0x2658	; 0x2658 <UART_receiveString>
    2720:	1a c0       	rjmp	.+52     	; 0x2756 <__vector_11+0x78>
	}
	else if(g_recieved_message == OPEN_DOOR)
    2722:	80 91 7d 00 	lds	r24, 0x007D
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	29 f4       	brne	.+10     	; 0x2734 <__vector_11+0x56>
	{

		UART_receiveString(g_Pass_recieved);
    272a:	81 e7       	ldi	r24, 0x71	; 113
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 2c 13 	call	0x2658	; 0x2658 <UART_receiveString>
    2732:	11 c0       	rjmp	.+34     	; 0x2756 <__vector_11+0x78>
	}
	else if(g_recieved_message == CHANGE_PASSWORD)
    2734:	80 91 7d 00 	lds	r24, 0x007D
    2738:	83 30       	cpi	r24, 0x03	; 3
    273a:	29 f4       	brne	.+10     	; 0x2746 <__vector_11+0x68>
	{

		UART_receiveString(g_Pass_recieved);
    273c:	81 e7       	ldi	r24, 0x71	; 113
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 2c 13 	call	0x2658	; 0x2658 <UART_receiveString>
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <__vector_11+0x78>
	}
	else if(g_recieved_message == SAVE_PASSWORD)
    2746:	80 91 7d 00 	lds	r24, 0x007D
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	21 f4       	brne	.+8      	; 0x2756 <__vector_11+0x78>
	{

		UART_receiveString(g_Pass_recieved);
    274e:	81 e7       	ldi	r24, 0x71	; 113
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 2c 13 	call	0x2658	; 0x2658 <UART_receiveString>
	}


	/*UART_receiveString();*/
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	ff 91       	pop	r31
    275c:	ef 91       	pop	r30
    275e:	bf 91       	pop	r27
    2760:	af 91       	pop	r26
    2762:	9f 91       	pop	r25
    2764:	8f 91       	pop	r24
    2766:	7f 91       	pop	r23
    2768:	6f 91       	pop	r22
    276a:	5f 91       	pop	r21
    276c:	4f 91       	pop	r20
    276e:	3f 91       	pop	r19
    2770:	2f 91       	pop	r18
    2772:	0f 90       	pop	r0
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	0f 90       	pop	r0
    2778:	1f 90       	pop	r1
    277a:	18 95       	reti

0000277c <__divmodhi4>:
    277c:	97 fb       	bst	r25, 7
    277e:	09 2e       	mov	r0, r25
    2780:	07 26       	eor	r0, r23
    2782:	0a d0       	rcall	.+20     	; 0x2798 <__divmodhi4_neg1>
    2784:	77 fd       	sbrc	r23, 7
    2786:	04 d0       	rcall	.+8      	; 0x2790 <__divmodhi4_neg2>
    2788:	2e d0       	rcall	.+92     	; 0x27e6 <__udivmodhi4>
    278a:	06 d0       	rcall	.+12     	; 0x2798 <__divmodhi4_neg1>
    278c:	00 20       	and	r0, r0
    278e:	1a f4       	brpl	.+6      	; 0x2796 <__divmodhi4_exit>

00002790 <__divmodhi4_neg2>:
    2790:	70 95       	com	r23
    2792:	61 95       	neg	r22
    2794:	7f 4f       	sbci	r23, 0xFF	; 255

00002796 <__divmodhi4_exit>:
    2796:	08 95       	ret

00002798 <__divmodhi4_neg1>:
    2798:	f6 f7       	brtc	.-4      	; 0x2796 <__divmodhi4_exit>
    279a:	90 95       	com	r25
    279c:	81 95       	neg	r24
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	08 95       	ret

000027a2 <__udivmodsi4>:
    27a2:	a1 e2       	ldi	r26, 0x21	; 33
    27a4:	1a 2e       	mov	r1, r26
    27a6:	aa 1b       	sub	r26, r26
    27a8:	bb 1b       	sub	r27, r27
    27aa:	fd 01       	movw	r30, r26
    27ac:	0d c0       	rjmp	.+26     	; 0x27c8 <__udivmodsi4_ep>

000027ae <__udivmodsi4_loop>:
    27ae:	aa 1f       	adc	r26, r26
    27b0:	bb 1f       	adc	r27, r27
    27b2:	ee 1f       	adc	r30, r30
    27b4:	ff 1f       	adc	r31, r31
    27b6:	a2 17       	cp	r26, r18
    27b8:	b3 07       	cpc	r27, r19
    27ba:	e4 07       	cpc	r30, r20
    27bc:	f5 07       	cpc	r31, r21
    27be:	20 f0       	brcs	.+8      	; 0x27c8 <__udivmodsi4_ep>
    27c0:	a2 1b       	sub	r26, r18
    27c2:	b3 0b       	sbc	r27, r19
    27c4:	e4 0b       	sbc	r30, r20
    27c6:	f5 0b       	sbc	r31, r21

000027c8 <__udivmodsi4_ep>:
    27c8:	66 1f       	adc	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	88 1f       	adc	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	1a 94       	dec	r1
    27d2:	69 f7       	brne	.-38     	; 0x27ae <__udivmodsi4_loop>
    27d4:	60 95       	com	r22
    27d6:	70 95       	com	r23
    27d8:	80 95       	com	r24
    27da:	90 95       	com	r25
    27dc:	9b 01       	movw	r18, r22
    27de:	ac 01       	movw	r20, r24
    27e0:	bd 01       	movw	r22, r26
    27e2:	cf 01       	movw	r24, r30
    27e4:	08 95       	ret

000027e6 <__udivmodhi4>:
    27e6:	aa 1b       	sub	r26, r26
    27e8:	bb 1b       	sub	r27, r27
    27ea:	51 e1       	ldi	r21, 0x11	; 17
    27ec:	07 c0       	rjmp	.+14     	; 0x27fc <__udivmodhi4_ep>

000027ee <__udivmodhi4_loop>:
    27ee:	aa 1f       	adc	r26, r26
    27f0:	bb 1f       	adc	r27, r27
    27f2:	a6 17       	cp	r26, r22
    27f4:	b7 07       	cpc	r27, r23
    27f6:	10 f0       	brcs	.+4      	; 0x27fc <__udivmodhi4_ep>
    27f8:	a6 1b       	sub	r26, r22
    27fa:	b7 0b       	sbc	r27, r23

000027fc <__udivmodhi4_ep>:
    27fc:	88 1f       	adc	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	5a 95       	dec	r21
    2802:	a9 f7       	brne	.-22     	; 0x27ee <__udivmodhi4_loop>
    2804:	80 95       	com	r24
    2806:	90 95       	com	r25
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	08 95       	ret

0000280e <__prologue_saves__>:
    280e:	2f 92       	push	r2
    2810:	3f 92       	push	r3
    2812:	4f 92       	push	r4
    2814:	5f 92       	push	r5
    2816:	6f 92       	push	r6
    2818:	7f 92       	push	r7
    281a:	8f 92       	push	r8
    281c:	9f 92       	push	r9
    281e:	af 92       	push	r10
    2820:	bf 92       	push	r11
    2822:	cf 92       	push	r12
    2824:	df 92       	push	r13
    2826:	ef 92       	push	r14
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	ca 1b       	sub	r28, r26
    2838:	db 0b       	sbc	r29, r27
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	09 94       	ijmp

00002846 <__epilogue_restores__>:
    2846:	2a 88       	ldd	r2, Y+18	; 0x12
    2848:	39 88       	ldd	r3, Y+17	; 0x11
    284a:	48 88       	ldd	r4, Y+16	; 0x10
    284c:	5f 84       	ldd	r5, Y+15	; 0x0f
    284e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2850:	7d 84       	ldd	r7, Y+13	; 0x0d
    2852:	8c 84       	ldd	r8, Y+12	; 0x0c
    2854:	9b 84       	ldd	r9, Y+11	; 0x0b
    2856:	aa 84       	ldd	r10, Y+10	; 0x0a
    2858:	b9 84       	ldd	r11, Y+9	; 0x09
    285a:	c8 84       	ldd	r12, Y+8	; 0x08
    285c:	df 80       	ldd	r13, Y+7	; 0x07
    285e:	ee 80       	ldd	r14, Y+6	; 0x06
    2860:	fd 80       	ldd	r15, Y+5	; 0x05
    2862:	0c 81       	ldd	r16, Y+4	; 0x04
    2864:	1b 81       	ldd	r17, Y+3	; 0x03
    2866:	aa 81       	ldd	r26, Y+2	; 0x02
    2868:	b9 81       	ldd	r27, Y+1	; 0x01
    286a:	ce 0f       	add	r28, r30
    286c:	d1 1d       	adc	r29, r1
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	ed 01       	movw	r28, r26
    287a:	08 95       	ret

0000287c <_exit>:
    287c:	f8 94       	cli

0000287e <__stop_program>:
    287e:	ff cf       	rjmp	.-2      	; 0x287e <__stop_program>
